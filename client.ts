/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import { AxiosRequestConfig } from "axios";
import {
  BenefitsCountrySummaryApi,
  BillingDocumentsApi,
  CompaniesApi,
  CompanyDepartmentApi,
  CompanyManagersApi,
  ContractAmendmentsApi,
  CostCalculatorApi,
  CountriesApi,
  CustomFieldsApi,
  EmploymentContractsApi,
  EmploymentsApi,
  ExpensesApi,
  FilesApi,
  IdentityApi,
  IncentivesApi,
  OAuth2Api,
  OffboardingApi,
  PayslipsApi,
  RecurringIncentivesApi,
  ResignationApi,
  SandboxApi,
  TimeOffApi,
  TimeOffBalancesApi,
  WebhookCallbacksApi,
} from "./api";
import { Configuration, ConfigurationParameters } from "./configuration";
import { RemoteCustom } from "./client-custom";

export class Remote extends RemoteCustom {
  readonly benefitsCountrySummary: BenefitsCountrySummaryApi;
  readonly billingDocuments: BillingDocumentsApi;
  readonly companies: CompaniesApi;
  readonly companyDepartment: CompanyDepartmentApi;
  readonly companyManagers: CompanyManagersApi;
  readonly contractAmendments: ContractAmendmentsApi;
  readonly costCalculator: CostCalculatorApi;
  readonly countries: CountriesApi;
  readonly customFields: CustomFieldsApi;
  readonly employmentContracts: EmploymentContractsApi;
  readonly employments: EmploymentsApi;
  readonly expenses: ExpensesApi;
  readonly files: FilesApi;
  readonly identity: IdentityApi;
  readonly incentives: IncentivesApi;
  readonly oAuth2: OAuth2Api;
  readonly offboarding: OffboardingApi;
  readonly payslips: PayslipsApi;
  readonly recurringIncentives: RecurringIncentivesApi;
  readonly resignation: ResignationApi;
  readonly sandbox: SandboxApi;
  readonly timeOff: TimeOffApi;
  readonly timeOffBalances: TimeOffBalancesApi;
  readonly webhookCallbacks: WebhookCallbacksApi;

  constructor(configurationParameters: ConfigurationParameters) {
    super(configurationParameters);
    const configuration = new Configuration(configurationParameters);
    this.benefitsCountrySummary = new BenefitsCountrySummaryApi(configuration);
    this.billingDocuments = new BillingDocumentsApi(configuration);
    this.companies = new CompaniesApi(configuration);
    this.companyDepartment = new CompanyDepartmentApi(configuration);
    this.companyManagers = new CompanyManagersApi(configuration);
    this.contractAmendments = new ContractAmendmentsApi(configuration);
    this.costCalculator = new CostCalculatorApi(configuration);
    this.countries = new CountriesApi(configuration);
    this.customFields = new CustomFieldsApi(configuration);
    this.employmentContracts = new EmploymentContractsApi(configuration);
    this.employments = new EmploymentsApi(configuration);
    this.expenses = new ExpensesApi(configuration);
    this.files = new FilesApi(configuration);
    this.identity = new IdentityApi(configuration);
    this.incentives = new IncentivesApi(configuration);
    this.oAuth2 = new OAuth2Api(configuration);
    this.offboarding = new OffboardingApi(configuration);
    this.payslips = new PayslipsApi(configuration);
    this.recurringIncentives = new RecurringIncentivesApi(configuration);
    this.resignation = new ResignationApi(configuration);
    this.sandbox = new SandboxApi(configuration);
    this.timeOff = new TimeOffApi(configuration);
    this.timeOffBalances = new TimeOffBalancesApi(configuration);
    this.webhookCallbacks = new WebhookCallbacksApi(configuration);
  }

}

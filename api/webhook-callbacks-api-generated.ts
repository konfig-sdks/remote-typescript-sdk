/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CreateWebhookCallbackParams } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { SuccessResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
// @ts-ignore
import { WebhookCallbackResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhookCallbacksApi - axios parameter creator
 * @export
 */
export const WebhookCallbacksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a callback previously registered for webhooks
         * @summary Delete a Webhook Callback
         * @param {string} id Webhook Callback ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCallback: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCallback', 'id', id)
            const localVarPath = `/v1/webhook-callbacks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook-callbacks/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a callback to be used for webhooks
         * @summary Create a Webhook Callback
         * @param {CreateWebhookCallbackParams} [createWebhookCallbackParams] WebhookCallback
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCallback: async (createWebhookCallbackParams?: CreateWebhookCallbackParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/webhook-callbacks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createWebhookCallbackParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook-callbacks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createWebhookCallbackParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookCallbacksApi - functional programming interface
 * @export
 */
export const WebhookCallbacksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookCallbacksApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a callback previously registered for webhooks
         * @summary Delete a Webhook Callback
         * @param {WebhookCallbacksApiDeleteCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCallback(requestParameters: WebhookCallbacksApiDeleteCallbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCallback(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register a callback to be used for webhooks
         * @summary Create a Webhook Callback
         * @param {WebhookCallbacksApiRegisterCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerCallback(requestParameters: WebhookCallbacksApiRegisterCallbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookCallbackResponse>> {
            const createWebhookCallbackParams: CreateWebhookCallbackParams = {
                subscribed_events: requestParameters.subscribed_events,
                url: requestParameters.url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerCallback(createWebhookCallbackParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookCallbacksApi - factory interface
 * @export
 */
export const WebhookCallbacksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookCallbacksApiFp(configuration)
    return {
        /**
         * Delete a callback previously registered for webhooks
         * @summary Delete a Webhook Callback
         * @param {WebhookCallbacksApiDeleteCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCallback(requestParameters: WebhookCallbacksApiDeleteCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteCallback(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a callback to be used for webhooks
         * @summary Create a Webhook Callback
         * @param {WebhookCallbacksApiRegisterCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCallback(requestParameters: WebhookCallbacksApiRegisterCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookCallbackResponse> {
            return localVarFp.registerCallback(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCallback operation in WebhookCallbacksApi.
 * @export
 * @interface WebhookCallbacksApiDeleteCallbackRequest
 */
export type WebhookCallbacksApiDeleteCallbackRequest = {
    
    /**
    * Webhook Callback ID
    * @type {string}
    * @memberof WebhookCallbacksApiDeleteCallback
    */
    readonly id: string
    
}

/**
 * Request parameters for registerCallback operation in WebhookCallbacksApi.
 * @export
 * @interface WebhookCallbacksApiRegisterCallbackRequest
 */
export type WebhookCallbacksApiRegisterCallbackRequest = {
    
} & CreateWebhookCallbackParams

/**
 * WebhookCallbacksApiGenerated - object-oriented interface
 * @export
 * @class WebhookCallbacksApiGenerated
 * @extends {BaseAPI}
 */
export class WebhookCallbacksApiGenerated extends BaseAPI {
    /**
     * Delete a callback previously registered for webhooks
     * @summary Delete a Webhook Callback
     * @param {WebhookCallbacksApiDeleteCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookCallbacksApiGenerated
     */
    public deleteCallback(requestParameters: WebhookCallbacksApiDeleteCallbackRequest, options?: AxiosRequestConfig) {
        return WebhookCallbacksApiFp(this.configuration).deleteCallback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a callback to be used for webhooks
     * @summary Create a Webhook Callback
     * @param {WebhookCallbacksApiRegisterCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookCallbacksApiGenerated
     */
    public registerCallback(requestParameters: WebhookCallbacksApiRegisterCallbackRequest, options?: AxiosRequestConfig) {
        return WebhookCallbacksApiFp(this.configuration).registerCallback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

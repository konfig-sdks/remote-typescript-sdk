/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CompaniesResponse } from '../models';
// @ts-ignore
import { CompanyCreationConflictErrorResponse } from '../models';
// @ts-ignore
import { CompanyCreationResponse } from '../models';
// @ts-ignore
import { CompanyResponse } from '../models';
// @ts-ignore
import { CreateCompanyParams } from '../models';
// @ts-ignore
import { ForbiddenResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
// @ts-ignore
import { UpdateCompanyParams } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *   Creates a new company.    ### Creating a company with only the required request body parameters   When you call this endpoint and omit all the optional parameters in the request body,   the following resources get created upon a successful response:   * A new company with status `pending`.   * A company owner for the new company with status `initiated`.    See the [update a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) for   more details on how to get your company and its owner to `active` status.    If you\'d like to create a company and its owner with `active` status in a single request,   please provide the optional `address_details` parameter as well.    ### Accepting the Terms of Service    A required step for creating a company in Remote is to accept our Terms of Service (ToS).    Company managers need to be aware of our Terms of Service and Privacy Policy,   hence **it\'s the responsibility of our partners to advise and ensure company managers read   and accept the ToS**. The terms have to be accepted only once, before creating a company,   and the Remote API will collect the acceptance timestamp as its confirmation.    To ensure users read the most recent version of Remote\'s Terms of Service, their **acceptance   must be done within the last fifteen minutes prior the company creation action**.    To retrieve this information, partners can provide an element with any text and a description   explaining that by performing that action they are accepting Remote\'s Term of Service. For   instance, the partner can add a checkbox or a \"Create Remote Account\" button followed by a   description saying \"By creating an account, you agree to   [Remote\'s Terms of Service](https://remote.com/terms-of-service). Also see Remote\'s   [Privacy Policy](https://remote.com/privacy-policy)\". 
         * @summary Create a company
         * @param {string} [action] Complementary action(s) to perform when creating a company:  - &#x60;get_oauth_access_tokens&#x60; returns the user\&#39;s access and refresh tokens - &#x60;send_create_password_email &#x60; sends a reset password token to the company owner\&#39;s email so they can log in using Remote UI (not needed if integration plans to use SSO only)  If &#x60;action&#x60; contains &#x60;send_create_password_email&#x60; you can redirect the user to [https://employ.remote.com/api-integration-new-password-send](https://employ.remote.com/api-integration-new-password-send) 
         * @param {CreateCompanyParams} [createCompanyParams] Create Company params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCompany: async (action?: string, createCompanyParams?: CreateCompanyParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createCompanyParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createCompanyParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all companies that authorized your integration to act on their behalf. In other words, these are all the companies that your integration can manage. Any company that has completed the authorization flow for your integration will be included in the response.
         * @summary List all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given an ID, shows a company
         * @summary Show a company
         * @param {string} companyId Company ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCompany: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('showCompany', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to `active` status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to `active` and the company onboarding will be marked as \"completed\".  The following constitutes a company with \"all the necessary data\": * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company `tax_number` or `registration_number` is not nil * Company `name` is not nil (already required when creating the company) * Company has a `desired_currency` in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
         * @summary Update a company
         * @param {string} companyId Company ID
         * @param {UpdateCompanyParams} [updateCompanyParams] Update Company params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany: async (companyId: string, updateCompanyParams?: UpdateCompanyParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateCompany', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateCompanyParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateCompanyParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to `active` status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to `active` and the company onboarding will be marked as \"completed\".  The following constitutes a company with \"all the necessary data\": * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company `tax_number` or `registration_number` is not nil * Company `name` is not nil (already required when creating the company) * Company has a `desired_currency` in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
         * @summary Update a company
         * @param {string} companyId Company ID
         * @param {UpdateCompanyParams} [updateCompanyParams] Update Company params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany_1: async (companyId: string, updateCompanyParams?: UpdateCompanyParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateCompany_1', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateCompanyParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateCompanyParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         *   Creates a new company.    ### Creating a company with only the required request body parameters   When you call this endpoint and omit all the optional parameters in the request body,   the following resources get created upon a successful response:   * A new company with status `pending`.   * A company owner for the new company with status `initiated`.    See the [update a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) for   more details on how to get your company and its owner to `active` status.    If you\'d like to create a company and its owner with `active` status in a single request,   please provide the optional `address_details` parameter as well.    ### Accepting the Terms of Service    A required step for creating a company in Remote is to accept our Terms of Service (ToS).    Company managers need to be aware of our Terms of Service and Privacy Policy,   hence **it\'s the responsibility of our partners to advise and ensure company managers read   and accept the ToS**. The terms have to be accepted only once, before creating a company,   and the Remote API will collect the acceptance timestamp as its confirmation.    To ensure users read the most recent version of Remote\'s Terms of Service, their **acceptance   must be done within the last fifteen minutes prior the company creation action**.    To retrieve this information, partners can provide an element with any text and a description   explaining that by performing that action they are accepting Remote\'s Term of Service. For   instance, the partner can add a checkbox or a \"Create Remote Account\" button followed by a   description saying \"By creating an account, you agree to   [Remote\'s Terms of Service](https://remote.com/terms-of-service). Also see Remote\'s   [Privacy Policy](https://remote.com/privacy-policy)\". 
         * @summary Create a company
         * @param {CompaniesApiCreateNewCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewCompany(requestParameters: CompaniesApiCreateNewCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyCreationResponse>> {
            const createCompanyParams: CreateCompanyParams = {
                address_details: requestParameters.address_details,
                bank_account_details: requestParameters.bank_account_details,
                company_owner_email: requestParameters.company_owner_email,
                company_owner_name: requestParameters.company_owner_name,
                country_code: requestParameters.country_code,
                desired_currency: requestParameters.desired_currency,
                email_domain: requestParameters.email_domain,
                external_id: requestParameters.external_id,
                name: requestParameters.name,
                phone_number: requestParameters.phone_number,
                registration_number: requestParameters.registration_number,
                tax_number: requestParameters.tax_number,
                terms_of_service_accepted_at: requestParameters.terms_of_service_accepted_at
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewCompany(requestParameters.action, createCompanyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all companies that authorized your integration to act on their behalf. In other words, these are all the companies that your integration can manage. Any company that has completed the authorization flow for your integration will be included in the response.
         * @summary List all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given an ID, shows a company
         * @summary Show a company
         * @param {CompaniesApiShowCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showCompany(requestParameters: CompaniesApiShowCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showCompany(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to `active` status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to `active` and the company onboarding will be marked as \"completed\".  The following constitutes a company with \"all the necessary data\": * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company `tax_number` or `registration_number` is not nil * Company `name` is not nil (already required when creating the company) * Company has a `desired_currency` in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
         * @summary Update a company
         * @param {CompaniesApiUpdateCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompany(requestParameters: CompaniesApiUpdateCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResponse>> {
            const updateCompanyParams: UpdateCompanyParams = {
                address_details: requestParameters.address_details,
                bank_account_details: requestParameters.bank_account_details,
                country_code: requestParameters.country_code,
                desired_currency: requestParameters.desired_currency,
                name: requestParameters.name,
                phone_number: requestParameters.phone_number,
                registration_number: requestParameters.registration_number,
                tax_number: requestParameters.tax_number
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompany(requestParameters.companyId, updateCompanyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to `active` status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to `active` and the company onboarding will be marked as \"completed\".  The following constitutes a company with \"all the necessary data\": * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company `tax_number` or `registration_number` is not nil * Company `name` is not nil (already required when creating the company) * Company has a `desired_currency` in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
         * @summary Update a company
         * @param {CompaniesApiUpdateCompany0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompany_1(requestParameters: CompaniesApiUpdateCompany0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResponse>> {
            const updateCompanyParams: UpdateCompanyParams = {
                address_details: requestParameters.address_details,
                bank_account_details: requestParameters.bank_account_details,
                country_code: requestParameters.country_code,
                desired_currency: requestParameters.desired_currency,
                name: requestParameters.name,
                phone_number: requestParameters.phone_number,
                registration_number: requestParameters.registration_number,
                tax_number: requestParameters.tax_number
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompany_1(requestParameters.companyId, updateCompanyParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         *   Creates a new company.    ### Creating a company with only the required request body parameters   When you call this endpoint and omit all the optional parameters in the request body,   the following resources get created upon a successful response:   * A new company with status `pending`.   * A company owner for the new company with status `initiated`.    See the [update a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) for   more details on how to get your company and its owner to `active` status.    If you\'d like to create a company and its owner with `active` status in a single request,   please provide the optional `address_details` parameter as well.    ### Accepting the Terms of Service    A required step for creating a company in Remote is to accept our Terms of Service (ToS).    Company managers need to be aware of our Terms of Service and Privacy Policy,   hence **it\'s the responsibility of our partners to advise and ensure company managers read   and accept the ToS**. The terms have to be accepted only once, before creating a company,   and the Remote API will collect the acceptance timestamp as its confirmation.    To ensure users read the most recent version of Remote\'s Terms of Service, their **acceptance   must be done within the last fifteen minutes prior the company creation action**.    To retrieve this information, partners can provide an element with any text and a description   explaining that by performing that action they are accepting Remote\'s Term of Service. For   instance, the partner can add a checkbox or a \"Create Remote Account\" button followed by a   description saying \"By creating an account, you agree to   [Remote\'s Terms of Service](https://remote.com/terms-of-service). Also see Remote\'s   [Privacy Policy](https://remote.com/privacy-policy)\". 
         * @summary Create a company
         * @param {CompaniesApiCreateNewCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCompany(requestParameters: CompaniesApiCreateNewCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyCreationResponse> {
            return localVarFp.createNewCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all companies that authorized your integration to act on their behalf. In other words, these are all the companies that your integration can manage. Any company that has completed the authorization flow for your integration will be included in the response.
         * @summary List all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(options?: AxiosRequestConfig): AxiosPromise<CompaniesResponse> {
            return localVarFp.listAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Given an ID, shows a company
         * @summary Show a company
         * @param {CompaniesApiShowCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCompany(requestParameters: CompaniesApiShowCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyResponse> {
            return localVarFp.showCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to `active` status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to `active` and the company onboarding will be marked as \"completed\".  The following constitutes a company with \"all the necessary data\": * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company `tax_number` or `registration_number` is not nil * Company `name` is not nil (already required when creating the company) * Company has a `desired_currency` in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
         * @summary Update a company
         * @param {CompaniesApiUpdateCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany(requestParameters: CompaniesApiUpdateCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyResponse> {
            return localVarFp.updateCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to `active` status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to `active` and the company onboarding will be marked as \"completed\".  The following constitutes a company with \"all the necessary data\": * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company `tax_number` or `registration_number` is not nil * Company `name` is not nil (already required when creating the company) * Company has a `desired_currency` in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
         * @summary Update a company
         * @param {CompaniesApiUpdateCompany0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany_1(requestParameters: CompaniesApiUpdateCompany0Request, options?: AxiosRequestConfig): AxiosPromise<CompanyResponse> {
            return localVarFp.updateCompany_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCreateNewCompanyRequest
 */
export type CompaniesApiCreateNewCompanyRequest = {
    
    /**
    * Complementary action(s) to perform when creating a company:  - `get_oauth_access_tokens` returns the user\'s access and refresh tokens - `send_create_password_email ` sends a reset password token to the company owner\'s email so they can log in using Remote UI (not needed if integration plans to use SSO only)  If `action` contains `send_create_password_email` you can redirect the user to [https://employ.remote.com/api-integration-new-password-send](https://employ.remote.com/api-integration-new-password-send) 
    * @type {string}
    * @memberof CompaniesApiCreateNewCompany
    */
    readonly action?: string
    
} & CreateCompanyParams

/**
 * Request parameters for showCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiShowCompanyRequest
 */
export type CompaniesApiShowCompanyRequest = {
    
    /**
    * Company ID
    * @type {string}
    * @memberof CompaniesApiShowCompany
    */
    readonly companyId: string
    
}

/**
 * Request parameters for updateCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiUpdateCompanyRequest
 */
export type CompaniesApiUpdateCompanyRequest = {
    
    /**
    * Company ID
    * @type {string}
    * @memberof CompaniesApiUpdateCompany
    */
    readonly companyId: string
    
} & UpdateCompanyParams

/**
 * Request parameters for updateCompany_1 operation in CompaniesApi.
 * @export
 * @interface CompaniesApiUpdateCompany0Request
 */
export type CompaniesApiUpdateCompany0Request = {
    
    /**
    * Company ID
    * @type {string}
    * @memberof CompaniesApiUpdateCompany0
    */
    readonly companyId: string
    
} & UpdateCompanyParams

/**
 * CompaniesApiGenerated - object-oriented interface
 * @export
 * @class CompaniesApiGenerated
 * @extends {BaseAPI}
 */
export class CompaniesApiGenerated extends BaseAPI {
    /**
     *   Creates a new company.    ### Creating a company with only the required request body parameters   When you call this endpoint and omit all the optional parameters in the request body,   the following resources get created upon a successful response:   * A new company with status `pending`.   * A company owner for the new company with status `initiated`.    See the [update a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) for   more details on how to get your company and its owner to `active` status.    If you\'d like to create a company and its owner with `active` status in a single request,   please provide the optional `address_details` parameter as well.    ### Accepting the Terms of Service    A required step for creating a company in Remote is to accept our Terms of Service (ToS).    Company managers need to be aware of our Terms of Service and Privacy Policy,   hence **it\'s the responsibility of our partners to advise and ensure company managers read   and accept the ToS**. The terms have to be accepted only once, before creating a company,   and the Remote API will collect the acceptance timestamp as its confirmation.    To ensure users read the most recent version of Remote\'s Terms of Service, their **acceptance   must be done within the last fifteen minutes prior the company creation action**.    To retrieve this information, partners can provide an element with any text and a description   explaining that by performing that action they are accepting Remote\'s Term of Service. For   instance, the partner can add a checkbox or a \"Create Remote Account\" button followed by a   description saying \"By creating an account, you agree to   [Remote\'s Terms of Service](https://remote.com/terms-of-service). Also see Remote\'s   [Privacy Policy](https://remote.com/privacy-policy)\". 
     * @summary Create a company
     * @param {CompaniesApiCreateNewCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public createNewCompany(requestParameters: CompaniesApiCreateNewCompanyRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).createNewCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all companies that authorized your integration to act on their behalf. In other words, these are all the companies that your integration can manage. Any company that has completed the authorization flow for your integration will be included in the response.
     * @summary List all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public listAll(options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).listAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given an ID, shows a company
     * @summary Show a company
     * @param {CompaniesApiShowCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public showCompany(requestParameters: CompaniesApiShowCompanyRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).showCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to `active` status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to `active` and the company onboarding will be marked as \"completed\".  The following constitutes a company with \"all the necessary data\": * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company `tax_number` or `registration_number` is not nil * Company `name` is not nil (already required when creating the company) * Company has a `desired_currency` in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
     * @summary Update a company
     * @param {CompaniesApiUpdateCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public updateCompany(requestParameters: CompaniesApiUpdateCompanyRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).updateCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to `active` status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to `active` and the company onboarding will be marked as \"completed\".  The following constitutes a company with \"all the necessary data\": * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company `tax_number` or `registration_number` is not nil * Company `name` is not nil (already required when creating the company) * Company has a `desired_currency` in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
     * @summary Update a company
     * @param {CompaniesApiUpdateCompany0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public updateCompany_1(requestParameters: CompaniesApiUpdateCompany0Request, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).updateCompany_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

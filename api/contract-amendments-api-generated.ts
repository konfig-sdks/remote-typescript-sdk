/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { ContractAmendmentAutomatableResponse } from '../models';
// @ts-ignore
import { ContractAmendmentFormResponse } from '../models';
// @ts-ignore
import { ContractAmendmentResponse } from '../models';
// @ts-ignore
import { ContractAmendmentSchemaParams } from '../models';
// @ts-ignore
import { CreateContractAmendmentParams } from '../models';
// @ts-ignore
import { ListContractAmendmentResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContractAmendmentsApi - axios parameter creator
 * @export
 */
export const ContractAmendmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approves a contract amendment request without the intervention of a Remote admin. Approvals done via this endpoint are effective immediately, regardless of the effective date entered on the contract amendment creation.  This endpoint is only available in Sandbox, otherwise it will respond with a 404. 
         * @summary Approve Contract Amendment in the Sandbox Environment
         * @param {string} contractAmendmentRequestId Contract amendment request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveAmendment: async (contractAmendmentRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractAmendmentRequestId' is not null or undefined
            assertParamExists('approveAmendment', 'contractAmendmentRequestId', contractAmendmentRequestId)
            const localVarPath = `/v1/sandbox/contract-amendments/{contract_amendment_request_id}/approve`
                .replace(`{${"contract_amendment_request_id"}}`, encodeURIComponent(String(contractAmendmentRequestId !== undefined ? contractAmendmentRequestId : `-contract_amendment_request_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/sandbox/contract-amendments/{contract_amendment_request_id}/approve',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if a contract amendment request is automatable. If the contract amendment request is automatable, then after submission, it will instantly amend the employee\'s contract and send them an updated document.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Automatable Contract Amendment
         * @param {CreateContractAmendmentParams} [createContractAmendmentParams] Contract Amendment Params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAutomatability: async (createContractAmendmentParams?: CreateContractAmendmentParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contract-amendments/automatable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createContractAmendmentParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contract-amendments/automatable',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createContractAmendmentParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Contract Amendment request.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Create Contract Amendment
         * @param {CreateContractAmendmentParams} [createContractAmendmentParams] Contract Amendment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest: async (createContractAmendmentParams?: CreateContractAmendmentParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contract-amendments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createContractAmendmentParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contract-amendments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createContractAmendmentParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the json schema of the `contract_amendment` form. This endpoint requires a company access token, as forms are dependent on certain properties of companies and their current employments. 
         * @summary Show form schema
         * @param {ContractAmendmentSchemaParams} contractAmendmentSchemaParams Contract Amendment Form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormSchema: async (contractAmendmentSchemaParams: ContractAmendmentSchemaParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractAmendmentSchemaParams' is not null or undefined
            assertParamExists('getFormSchema', 'contractAmendmentSchemaParams', contractAmendmentSchemaParams)
            const localVarPath = `/v1/contract-amendments/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractAmendmentSchemaParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contract-amendments/schema',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractAmendmentSchemaParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Contract Amendment requests.
         * @summary List Contract Amendment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequests: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contract-amendments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contract-amendments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show a single Contract Amendment request.
         * @summary Show Contract Amendment
         * @param {string} id Contract amendment request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSingleRequest: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showSingleRequest', 'id', id)
            const localVarPath = `/v1/contract-amendments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contract-amendments/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractAmendmentsApi - functional programming interface
 * @export
 */
export const ContractAmendmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractAmendmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Approves a contract amendment request without the intervention of a Remote admin. Approvals done via this endpoint are effective immediately, regardless of the effective date entered on the contract amendment creation.  This endpoint is only available in Sandbox, otherwise it will respond with a 404. 
         * @summary Approve Contract Amendment in the Sandbox Environment
         * @param {ContractAmendmentsApiApproveAmendmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveAmendment(requestParameters: ContractAmendmentsApiApproveAmendmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractAmendmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveAmendment(requestParameters.contractAmendmentRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if a contract amendment request is automatable. If the contract amendment request is automatable, then after submission, it will instantly amend the employee\'s contract and send them an updated document.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Automatable Contract Amendment
         * @param {ContractAmendmentsApiCheckAutomatabilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAutomatability(requestParameters: ContractAmendmentsApiCheckAutomatabilityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractAmendmentAutomatableResponse>> {
            const createContractAmendmentParams: CreateContractAmendmentParams = {
                amendment_contract_id: requestParameters.amendment_contract_id,
                contract_amendment: requestParameters.contract_amendment,
                employment_id: requestParameters.employment_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAutomatability(createContractAmendmentParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Contract Amendment request.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Create Contract Amendment
         * @param {ContractAmendmentsApiCreateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRequest(requestParameters: ContractAmendmentsApiCreateRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractAmendmentResponse>> {
            const createContractAmendmentParams: CreateContractAmendmentParams = {
                amendment_contract_id: requestParameters.amendment_contract_id,
                contract_amendment: requestParameters.contract_amendment,
                employment_id: requestParameters.employment_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRequest(createContractAmendmentParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the json schema of the `contract_amendment` form. This endpoint requires a company access token, as forms are dependent on certain properties of companies and their current employments. 
         * @summary Show form schema
         * @param {ContractAmendmentsApiGetFormSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormSchema(requestParameters: ContractAmendmentsApiGetFormSchemaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractAmendmentFormResponse>> {
            const contractAmendmentSchemaParams: ContractAmendmentSchemaParams = {
                country_code: requestParameters.country_code,
                employment_id: requestParameters.employment_id,
                form: requestParameters.form
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormSchema(contractAmendmentSchemaParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Contract Amendment requests.
         * @summary List Contract Amendment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRequests(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListContractAmendmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRequests(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Show a single Contract Amendment request.
         * @summary Show Contract Amendment
         * @param {ContractAmendmentsApiShowSingleRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSingleRequest(requestParameters: ContractAmendmentsApiShowSingleRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractAmendmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSingleRequest(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractAmendmentsApi - factory interface
 * @export
 */
export const ContractAmendmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractAmendmentsApiFp(configuration)
    return {
        /**
         * Approves a contract amendment request without the intervention of a Remote admin. Approvals done via this endpoint are effective immediately, regardless of the effective date entered on the contract amendment creation.  This endpoint is only available in Sandbox, otherwise it will respond with a 404. 
         * @summary Approve Contract Amendment in the Sandbox Environment
         * @param {ContractAmendmentsApiApproveAmendmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveAmendment(requestParameters: ContractAmendmentsApiApproveAmendmentRequest, options?: AxiosRequestConfig): AxiosPromise<ContractAmendmentResponse> {
            return localVarFp.approveAmendment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if a contract amendment request is automatable. If the contract amendment request is automatable, then after submission, it will instantly amend the employee\'s contract and send them an updated document.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Automatable Contract Amendment
         * @param {ContractAmendmentsApiCheckAutomatabilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAutomatability(requestParameters: ContractAmendmentsApiCheckAutomatabilityRequest, options?: AxiosRequestConfig): AxiosPromise<ContractAmendmentAutomatableResponse> {
            return localVarFp.checkAutomatability(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Contract Amendment request.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Create Contract Amendment
         * @param {ContractAmendmentsApiCreateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest(requestParameters: ContractAmendmentsApiCreateRequestRequest, options?: AxiosRequestConfig): AxiosPromise<ContractAmendmentResponse> {
            return localVarFp.createRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the json schema of the `contract_amendment` form. This endpoint requires a company access token, as forms are dependent on certain properties of companies and their current employments. 
         * @summary Show form schema
         * @param {ContractAmendmentsApiGetFormSchemaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormSchema(requestParameters: ContractAmendmentsApiGetFormSchemaRequest, options?: AxiosRequestConfig): AxiosPromise<ContractAmendmentFormResponse> {
            return localVarFp.getFormSchema(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List Contract Amendment requests.
         * @summary List Contract Amendment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequests(options?: AxiosRequestConfig): AxiosPromise<ListContractAmendmentResponse> {
            return localVarFp.listRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * Show a single Contract Amendment request.
         * @summary Show Contract Amendment
         * @param {ContractAmendmentsApiShowSingleRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSingleRequest(requestParameters: ContractAmendmentsApiShowSingleRequestRequest, options?: AxiosRequestConfig): AxiosPromise<ContractAmendmentResponse> {
            return localVarFp.showSingleRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveAmendment operation in ContractAmendmentsApi.
 * @export
 * @interface ContractAmendmentsApiApproveAmendmentRequest
 */
export type ContractAmendmentsApiApproveAmendmentRequest = {
    
    /**
    * Contract amendment request ID
    * @type {string}
    * @memberof ContractAmendmentsApiApproveAmendment
    */
    readonly contractAmendmentRequestId: string
    
}

/**
 * Request parameters for checkAutomatability operation in ContractAmendmentsApi.
 * @export
 * @interface ContractAmendmentsApiCheckAutomatabilityRequest
 */
export type ContractAmendmentsApiCheckAutomatabilityRequest = {
    
} & CreateContractAmendmentParams

/**
 * Request parameters for createRequest operation in ContractAmendmentsApi.
 * @export
 * @interface ContractAmendmentsApiCreateRequestRequest
 */
export type ContractAmendmentsApiCreateRequestRequest = {
    
} & CreateContractAmendmentParams

/**
 * Request parameters for getFormSchema operation in ContractAmendmentsApi.
 * @export
 * @interface ContractAmendmentsApiGetFormSchemaRequest
 */
export type ContractAmendmentsApiGetFormSchemaRequest = {
    
} & ContractAmendmentSchemaParams

/**
 * Request parameters for showSingleRequest operation in ContractAmendmentsApi.
 * @export
 * @interface ContractAmendmentsApiShowSingleRequestRequest
 */
export type ContractAmendmentsApiShowSingleRequestRequest = {
    
    /**
    * Contract amendment request ID
    * @type {string}
    * @memberof ContractAmendmentsApiShowSingleRequest
    */
    readonly id: string
    
}

/**
 * ContractAmendmentsApiGenerated - object-oriented interface
 * @export
 * @class ContractAmendmentsApiGenerated
 * @extends {BaseAPI}
 */
export class ContractAmendmentsApiGenerated extends BaseAPI {
    /**
     * Approves a contract amendment request without the intervention of a Remote admin. Approvals done via this endpoint are effective immediately, regardless of the effective date entered on the contract amendment creation.  This endpoint is only available in Sandbox, otherwise it will respond with a 404. 
     * @summary Approve Contract Amendment in the Sandbox Environment
     * @param {ContractAmendmentsApiApproveAmendmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractAmendmentsApiGenerated
     */
    public approveAmendment(requestParameters: ContractAmendmentsApiApproveAmendmentRequest, options?: AxiosRequestConfig) {
        return ContractAmendmentsApiFp(this.configuration).approveAmendment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if a contract amendment request is automatable. If the contract amendment request is automatable, then after submission, it will instantly amend the employee\'s contract and send them an updated document.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @summary Automatable Contract Amendment
     * @param {ContractAmendmentsApiCheckAutomatabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractAmendmentsApiGenerated
     */
    public checkAutomatability(requestParameters: ContractAmendmentsApiCheckAutomatabilityRequest, options?: AxiosRequestConfig) {
        return ContractAmendmentsApiFp(this.configuration).checkAutomatability(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Contract Amendment request.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @summary Create Contract Amendment
     * @param {ContractAmendmentsApiCreateRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractAmendmentsApiGenerated
     */
    public createRequest(requestParameters: ContractAmendmentsApiCreateRequestRequest, options?: AxiosRequestConfig) {
        return ContractAmendmentsApiFp(this.configuration).createRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the json schema of the `contract_amendment` form. This endpoint requires a company access token, as forms are dependent on certain properties of companies and their current employments. 
     * @summary Show form schema
     * @param {ContractAmendmentsApiGetFormSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractAmendmentsApiGenerated
     */
    public getFormSchema(requestParameters: ContractAmendmentsApiGetFormSchemaRequest, options?: AxiosRequestConfig) {
        return ContractAmendmentsApiFp(this.configuration).getFormSchema(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Contract Amendment requests.
     * @summary List Contract Amendment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractAmendmentsApiGenerated
     */
    public listRequests(options?: AxiosRequestConfig) {
        return ContractAmendmentsApiFp(this.configuration).listRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show a single Contract Amendment request.
     * @summary Show Contract Amendment
     * @param {ContractAmendmentsApiShowSingleRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractAmendmentsApiGenerated
     */
    public showSingleRequest(requestParameters: ContractAmendmentsApiShowSingleRequestRequest, options?: AxiosRequestConfig) {
        return ContractAmendmentsApiFp(this.configuration).showSingleRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

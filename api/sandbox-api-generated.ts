/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { ConflictResponse } from '../models';
// @ts-ignore
import { EmploymentBasicParams } from '../models';
// @ts-ignore
import { EmploymentCreationResponse } from '../models';
// @ts-ignore
import { EmploymentResponse } from '../models';
// @ts-ignore
import { EmploymentStatus } from '../models';
// @ts-ignore
import { EmploymentUpdateParams } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { SuccessResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
// @ts-ignore
import { WebhookTriggerParams } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SandboxApi - axios parameter creator
 * @export
 */
export const SandboxApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an employment without provisional_start_date validation.  This endpoint is only available in Sandbox and allows creating employments which `provisional_start_date` is in the past. This is especially helpful for:   * Testing the Timeoff Balance endpoints   * Testing the Offboarding endpoints   * Testing features around probation periods  This endpoint will respond with a 404 outside of the Sandbox environment.  For creating an employment\'s parameters outside of testing purposes, use [this Employment create endpoint](https://gateway.remote.com/v1/docs/openapi.html) 
         * @summary Create employment
         * @param {EmploymentBasicParams} [employmentBasicParams] Employment params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmploymentWithoutValidations: async (employmentBasicParams?: EmploymentBasicParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sandbox/employments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employmentBasicParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/sandbox/employments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employmentBasicParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an employment. Use this endpoint to modify employment states for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment.  For updating an employment\'s parameters outside of testing purposes, use [this Employment update endpoint](https://gateway.remote.com/v1/docs/openapi.html). 
         * @summary Update employment
         * @param {string} employmentId Employment ID
         * @param {EmploymentUpdateParams} [employmentUpdateParams] Employment params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentUpdate: async (employmentId: string, employmentUpdateParams?: EmploymentUpdateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('employmentUpdate', 'employmentId', employmentId)
            const localVarPath = `/v1/sandbox/employments/{employment_id}`
                .replace(`{${"employment_id"}}`, encodeURIComponent(String(employmentId !== undefined ? employmentId : `-employment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employmentUpdateParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/sandbox/employments/{employment_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employmentUpdateParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Triggers a callback previously registered for webhooks. Use this endpoint to emit a webhook for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment. 
         * @summary Trigger a Webhook
         * @param {WebhookTriggerParams} [webhookTriggerParams] Webhook Trigger Params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerWebhookCallback: async (webhookTriggerParams?: WebhookTriggerParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sandbox/webhook-callbacks/trigger`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhookTriggerParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/sandbox/webhook-callbacks/trigger',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhookTriggerParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an employment. Use this endpoint to modify employment states for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment.  For updating an employment\'s parameters outside of testing purposes, use [this Employment update endpoint](https://gateway.remote.com/v1/docs/openapi.html). 
         * @summary Update employment
         * @param {string} employmentId Employment ID
         * @param {EmploymentUpdateParams} [employmentUpdateParams] Employment params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmploymentState: async (employmentId: string, employmentUpdateParams?: EmploymentUpdateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('updateEmploymentState', 'employmentId', employmentId)
            const localVarPath = `/v1/sandbox/employments/{employment_id}`
                .replace(`{${"employment_id"}}`, encodeURIComponent(String(employmentId !== undefined ? employmentId : `-employment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employmentUpdateParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/sandbox/employments/{employment_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employmentUpdateParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SandboxApi - functional programming interface
 * @export
 */
export const SandboxApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SandboxApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an employment without provisional_start_date validation.  This endpoint is only available in Sandbox and allows creating employments which `provisional_start_date` is in the past. This is especially helpful for:   * Testing the Timeoff Balance endpoints   * Testing the Offboarding endpoints   * Testing features around probation periods  This endpoint will respond with a 404 outside of the Sandbox environment.  For creating an employment\'s parameters outside of testing purposes, use [this Employment create endpoint](https://gateway.remote.com/v1/docs/openapi.html) 
         * @summary Create employment
         * @param {SandboxApiCreateEmploymentWithoutValidationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmploymentWithoutValidations(requestParameters: SandboxApiCreateEmploymentWithoutValidationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentCreationResponse>> {
            const employmentBasicParams: EmploymentBasicParams = {
                basic_information: requestParameters.basic_information,
                country_code: requestParameters.country_code,
                full_name: requestParameters.full_name,
                job_title: requestParameters.job_title,
                personal_email: requestParameters.personal_email,
                provisional_start_date: requestParameters.provisional_start_date,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmploymentWithoutValidations(employmentBasicParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an employment. Use this endpoint to modify employment states for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment.  For updating an employment\'s parameters outside of testing purposes, use [this Employment update endpoint](https://gateway.remote.com/v1/docs/openapi.html). 
         * @summary Update employment
         * @param {SandboxApiEmploymentUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employmentUpdate(requestParameters: SandboxApiEmploymentUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponse>> {
            const employmentUpdateParams: EmploymentUpdateParams = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.employmentUpdate(requestParameters.employmentId, employmentUpdateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Triggers a callback previously registered for webhooks. Use this endpoint to emit a webhook for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment. 
         * @summary Trigger a Webhook
         * @param {SandboxApiTriggerWebhookCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerWebhookCallback(requestParameters: SandboxApiTriggerWebhookCallbackRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const webhookTriggerParams: WebhookTriggerParams = {
                employment_id: requestParameters.employment_id,
                event_type: requestParameters.event_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerWebhookCallback(webhookTriggerParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an employment. Use this endpoint to modify employment states for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment.  For updating an employment\'s parameters outside of testing purposes, use [this Employment update endpoint](https://gateway.remote.com/v1/docs/openapi.html). 
         * @summary Update employment
         * @param {SandboxApiUpdateEmploymentStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmploymentState(requestParameters: SandboxApiUpdateEmploymentStateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponse>> {
            const employmentUpdateParams: EmploymentUpdateParams = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmploymentState(requestParameters.employmentId, employmentUpdateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SandboxApi - factory interface
 * @export
 */
export const SandboxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SandboxApiFp(configuration)
    return {
        /**
         * Creates an employment without provisional_start_date validation.  This endpoint is only available in Sandbox and allows creating employments which `provisional_start_date` is in the past. This is especially helpful for:   * Testing the Timeoff Balance endpoints   * Testing the Offboarding endpoints   * Testing features around probation periods  This endpoint will respond with a 404 outside of the Sandbox environment.  For creating an employment\'s parameters outside of testing purposes, use [this Employment create endpoint](https://gateway.remote.com/v1/docs/openapi.html) 
         * @summary Create employment
         * @param {SandboxApiCreateEmploymentWithoutValidationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmploymentWithoutValidations(requestParameters: SandboxApiCreateEmploymentWithoutValidationsRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentCreationResponse> {
            return localVarFp.createEmploymentWithoutValidations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an employment. Use this endpoint to modify employment states for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment.  For updating an employment\'s parameters outside of testing purposes, use [this Employment update endpoint](https://gateway.remote.com/v1/docs/openapi.html). 
         * @summary Update employment
         * @param {SandboxApiEmploymentUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentUpdate(requestParameters: SandboxApiEmploymentUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponse> {
            return localVarFp.employmentUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Triggers a callback previously registered for webhooks. Use this endpoint to emit a webhook for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment. 
         * @summary Trigger a Webhook
         * @param {SandboxApiTriggerWebhookCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerWebhookCallback(requestParameters: SandboxApiTriggerWebhookCallbackRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.triggerWebhookCallback(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an employment. Use this endpoint to modify employment states for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment.  For updating an employment\'s parameters outside of testing purposes, use [this Employment update endpoint](https://gateway.remote.com/v1/docs/openapi.html). 
         * @summary Update employment
         * @param {SandboxApiUpdateEmploymentStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmploymentState(requestParameters: SandboxApiUpdateEmploymentStateRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponse> {
            return localVarFp.updateEmploymentState(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmploymentWithoutValidations operation in SandboxApi.
 * @export
 * @interface SandboxApiCreateEmploymentWithoutValidationsRequest
 */
export type SandboxApiCreateEmploymentWithoutValidationsRequest = {
    
} & EmploymentBasicParams

/**
 * Request parameters for employmentUpdate operation in SandboxApi.
 * @export
 * @interface SandboxApiEmploymentUpdateRequest
 */
export type SandboxApiEmploymentUpdateRequest = {
    
    /**
    * Employment ID
    * @type {string}
    * @memberof SandboxApiEmploymentUpdate
    */
    readonly employmentId: string
    
} & EmploymentUpdateParams

/**
 * Request parameters for triggerWebhookCallback operation in SandboxApi.
 * @export
 * @interface SandboxApiTriggerWebhookCallbackRequest
 */
export type SandboxApiTriggerWebhookCallbackRequest = {
    
} & WebhookTriggerParams

/**
 * Request parameters for updateEmploymentState operation in SandboxApi.
 * @export
 * @interface SandboxApiUpdateEmploymentStateRequest
 */
export type SandboxApiUpdateEmploymentStateRequest = {
    
    /**
    * Employment ID
    * @type {string}
    * @memberof SandboxApiUpdateEmploymentState
    */
    readonly employmentId: string
    
} & EmploymentUpdateParams

/**
 * SandboxApiGenerated - object-oriented interface
 * @export
 * @class SandboxApiGenerated
 * @extends {BaseAPI}
 */
export class SandboxApiGenerated extends BaseAPI {
    /**
     * Creates an employment without provisional_start_date validation.  This endpoint is only available in Sandbox and allows creating employments which `provisional_start_date` is in the past. This is especially helpful for:   * Testing the Timeoff Balance endpoints   * Testing the Offboarding endpoints   * Testing features around probation periods  This endpoint will respond with a 404 outside of the Sandbox environment.  For creating an employment\'s parameters outside of testing purposes, use [this Employment create endpoint](https://gateway.remote.com/v1/docs/openapi.html) 
     * @summary Create employment
     * @param {SandboxApiCreateEmploymentWithoutValidationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApiGenerated
     */
    public createEmploymentWithoutValidations(requestParameters: SandboxApiCreateEmploymentWithoutValidationsRequest, options?: AxiosRequestConfig) {
        return SandboxApiFp(this.configuration).createEmploymentWithoutValidations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an employment. Use this endpoint to modify employment states for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment.  For updating an employment\'s parameters outside of testing purposes, use [this Employment update endpoint](https://gateway.remote.com/v1/docs/openapi.html). 
     * @summary Update employment
     * @param {SandboxApiEmploymentUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApiGenerated
     */
    public employmentUpdate(requestParameters: SandboxApiEmploymentUpdateRequest, options?: AxiosRequestConfig) {
        return SandboxApiFp(this.configuration).employmentUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Triggers a callback previously registered for webhooks. Use this endpoint to emit a webhook for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment. 
     * @summary Trigger a Webhook
     * @param {SandboxApiTriggerWebhookCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApiGenerated
     */
    public triggerWebhookCallback(requestParameters: SandboxApiTriggerWebhookCallbackRequest = {}, options?: AxiosRequestConfig) {
        return SandboxApiFp(this.configuration).triggerWebhookCallback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an employment. Use this endpoint to modify employment states for testing in the Sandbox environment. This endpoint will respond with a 404 outside of the Sandbox environment.  For updating an employment\'s parameters outside of testing purposes, use [this Employment update endpoint](https://gateway.remote.com/v1/docs/openapi.html). 
     * @summary Update employment
     * @param {SandboxApiUpdateEmploymentStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApiGenerated
     */
    public updateEmploymentState(requestParameters: SandboxApiUpdateEmploymentStateRequest, options?: AxiosRequestConfig) {
        return SandboxApiFp(this.configuration).updateEmploymentState(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

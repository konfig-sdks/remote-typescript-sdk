/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CompanyManagerData } from '../models';
// @ts-ignore
import { CompanyManagerParams } from '../models';
// @ts-ignore
import { CompanyManagerResponse } from '../models';
// @ts-ignore
import { CompanyManagersResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { SuccessResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompanyManagersApi - axios parameter creator
 * @export
 */
export const CompanyManagersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Company Manager and sends the invitation email for signing in to the Remote Platform.
         * @summary Create and invite a Company Manager
         * @param {CompanyManagerParams} [companyManagerParams] Company Manager params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvite: async (companyManagerParams?: CompanyManagerParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/company-managers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companyManagerParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company-managers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companyManagerParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Company Manager user
         * @summary Deletes a Company Manager user
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/v1/company-managers/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company-managers/{user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all company managers of an integration. If filtered by the company_id param, it lists only company managers belonging to the specified company. 
         * @summary List Company Managers
         * @param {string} [companyId] A Company ID to filter the results (only applicable for Integration Partners).
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Change the amount of records returned per page, defaults to 20, limited to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagers: async (companyId?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/company-managers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company-managers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows a single company manager user
         * @summary Show company manager user
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('showUser', 'userId', userId)
            const localVarPath = `/v1/company-managers/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company-managers/{user_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyManagersApi - functional programming interface
 * @export
 */
export const CompanyManagersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyManagersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Company Manager and sends the invitation email for signing in to the Remote Platform.
         * @summary Create and invite a Company Manager
         * @param {CompanyManagersApiCreateInviteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvite(requestParameters: CompanyManagersApiCreateInviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyManagerData>> {
            const companyManagerParams: CompanyManagerParams = {
                company_id: requestParameters.company_id,
                email: requestParameters.email,
                name: requestParameters.name,
                role: requestParameters.role
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInvite(companyManagerParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Company Manager user
         * @summary Deletes a Company Manager user
         * @param {CompanyManagersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(requestParameters: CompanyManagersApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all company managers of an integration. If filtered by the company_id param, it lists only company managers belonging to the specified company. 
         * @summary List Company Managers
         * @param {CompanyManagersApiListManagersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listManagers(requestParameters: CompanyManagersApiListManagersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyManagersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listManagers(requestParameters.companyId, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows a single company manager user
         * @summary Show company manager user
         * @param {CompanyManagersApiShowUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showUser(requestParameters: CompanyManagersApiShowUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyManagerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showUser(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyManagersApi - factory interface
 * @export
 */
export const CompanyManagersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyManagersApiFp(configuration)
    return {
        /**
         * Create a Company Manager and sends the invitation email for signing in to the Remote Platform.
         * @summary Create and invite a Company Manager
         * @param {CompanyManagersApiCreateInviteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvite(requestParameters: CompanyManagersApiCreateInviteRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyManagerData> {
            return localVarFp.createInvite(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Company Manager user
         * @summary Deletes a Company Manager user
         * @param {CompanyManagersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: CompanyManagersApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all company managers of an integration. If filtered by the company_id param, it lists only company managers belonging to the specified company. 
         * @summary List Company Managers
         * @param {CompanyManagersApiListManagersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listManagers(requestParameters: CompanyManagersApiListManagersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CompanyManagersResponse> {
            return localVarFp.listManagers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows a single company manager user
         * @summary Show company manager user
         * @param {CompanyManagersApiShowUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showUser(requestParameters: CompanyManagersApiShowUserRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyManagerResponse> {
            return localVarFp.showUser(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createInvite operation in CompanyManagersApi.
 * @export
 * @interface CompanyManagersApiCreateInviteRequest
 */
export type CompanyManagersApiCreateInviteRequest = {
    
} & CompanyManagerParams

/**
 * Request parameters for deleteUser operation in CompanyManagersApi.
 * @export
 * @interface CompanyManagersApiDeleteUserRequest
 */
export type CompanyManagersApiDeleteUserRequest = {
    
    /**
    * User ID
    * @type {string}
    * @memberof CompanyManagersApiDeleteUser
    */
    readonly userId: string
    
}

/**
 * Request parameters for listManagers operation in CompanyManagersApi.
 * @export
 * @interface CompanyManagersApiListManagersRequest
 */
export type CompanyManagersApiListManagersRequest = {
    
    /**
    * A Company ID to filter the results (only applicable for Integration Partners).
    * @type {string}
    * @memberof CompanyManagersApiListManagers
    */
    readonly companyId?: string
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof CompanyManagersApiListManagers
    */
    readonly page?: number
    
    /**
    * Change the amount of records returned per page, defaults to 20, limited to 100
    * @type {number}
    * @memberof CompanyManagersApiListManagers
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for showUser operation in CompanyManagersApi.
 * @export
 * @interface CompanyManagersApiShowUserRequest
 */
export type CompanyManagersApiShowUserRequest = {
    
    /**
    * User ID
    * @type {string}
    * @memberof CompanyManagersApiShowUser
    */
    readonly userId: string
    
}

/**
 * CompanyManagersApiGenerated - object-oriented interface
 * @export
 * @class CompanyManagersApiGenerated
 * @extends {BaseAPI}
 */
export class CompanyManagersApiGenerated extends BaseAPI {
    /**
     * Create a Company Manager and sends the invitation email for signing in to the Remote Platform.
     * @summary Create and invite a Company Manager
     * @param {CompanyManagersApiCreateInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyManagersApiGenerated
     */
    public createInvite(requestParameters: CompanyManagersApiCreateInviteRequest, options?: AxiosRequestConfig) {
        return CompanyManagersApiFp(this.configuration).createInvite(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Company Manager user
     * @summary Deletes a Company Manager user
     * @param {CompanyManagersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyManagersApiGenerated
     */
    public deleteUser(requestParameters: CompanyManagersApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return CompanyManagersApiFp(this.configuration).deleteUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all company managers of an integration. If filtered by the company_id param, it lists only company managers belonging to the specified company. 
     * @summary List Company Managers
     * @param {CompanyManagersApiListManagersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyManagersApiGenerated
     */
    public listManagers(requestParameters: CompanyManagersApiListManagersRequest = {}, options?: AxiosRequestConfig) {
        return CompanyManagersApiFp(this.configuration).listManagers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows a single company manager user
     * @summary Show company manager user
     * @param {CompanyManagersApiShowUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyManagersApiGenerated
     */
    public showUser(requestParameters: CompanyManagersApiShowUserRequest, options?: AxiosRequestConfig) {
        return CompanyManagersApiFp(this.configuration).showUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

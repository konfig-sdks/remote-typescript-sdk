/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AmountTaxType } from '../models';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { ConflictResponse } from '../models';
// @ts-ignore
import { CreateOneTimeIncentiveParams } from '../models';
// @ts-ignore
import { IncentiveResponse } from '../models';
// @ts-ignore
import { ListIncentivesResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { SuccessResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
// @ts-ignore
import { UpdateIncentiveParams } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IncentivesApi - axios parameter creator
 * @export
 */
export const IncentivesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field. 
         * @summary Create Incentive
         * @param {CreateOneTimeIncentiveParams} [createOneTimeIncentiveParams] Incentive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIncentive: async (createOneTimeIncentiveParams?: CreateOneTimeIncentiveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/incentives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createOneTimeIncentiveParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createOneTimeIncentiveParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all Incentives of a company
         * @summary List Incentives
         * @param {string} [employmentId] Filter by Employment ID
         * @param {string} [status] Filter by Incentive status
         * @param {string} [recurringIncentiveId] Filter by Recurring Incentive id
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Change the amount of records returned per page, defaults to 20, limited to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (employmentId?: string, status?: string, recurringIncentiveId?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/incentives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (employmentId !== undefined) {
                localVarQueryParameter['employment_id'] = employmentId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (recurringIncentiveId !== undefined) {
                localVarQueryParameter['recurring_incentive_id'] = recurringIncentiveId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an incentive.  `one_time` incentives that have the following status **CANNOT** be deleted: * `processing` * `paid` 
         * @summary Delete an Incentive
         * @param {string} id Incentive ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIncentive: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeIncentive', 'id', id)
            const localVarPath = `/v1/incentives/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show an Incentive\'s details
         * @summary Show Incentive
         * @param {string} id Incentive ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showDetails', 'id', id)
            const localVarPath = `/v1/incentives/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field.  The API doesn\'t support updating paid incentives. 
         * @summary Update Incentive
         * @param {string} id Incentive ID
         * @param {UpdateIncentiveParams} [updateIncentiveParams] Incentive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIncentive: async (id: string, updateIncentiveParams?: UpdateIncentiveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateIncentive', 'id', id)
            const localVarPath = `/v1/incentives/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateIncentiveParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateIncentiveParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field.  The API doesn\'t support updating paid incentives. 
         * @summary Update Incentive
         * @param {string} id Incentive ID
         * @param {UpdateIncentiveParams} [updateIncentiveParams] Incentive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIncentive_1: async (id: string, updateIncentiveParams?: UpdateIncentiveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateIncentive_1', 'id', id)
            const localVarPath = `/v1/incentives/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateIncentiveParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateIncentiveParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IncentivesApi - functional programming interface
 * @export
 */
export const IncentivesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IncentivesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field. 
         * @summary Create Incentive
         * @param {IncentivesApiCreateIncentiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIncentive(requestParameters: IncentivesApiCreateIncentiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncentiveResponse>> {
            const createOneTimeIncentiveParams: CreateOneTimeIncentiveParams = {
                amount: requestParameters.amount,
                amount_tax_type: requestParameters.amount_tax_type,
                effective_date: requestParameters.effective_date,
                employment_id: requestParameters.employment_id,
                note: requestParameters.note,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIncentive(createOneTimeIncentiveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all Incentives of a company
         * @summary List Incentives
         * @param {IncentivesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: IncentivesApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIncentivesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.employmentId, requestParameters.status, requestParameters.recurringIncentiveId, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an incentive.  `one_time` incentives that have the following status **CANNOT** be deleted: * `processing` * `paid` 
         * @summary Delete an Incentive
         * @param {IncentivesApiRemoveIncentiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeIncentive(requestParameters: IncentivesApiRemoveIncentiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeIncentive(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Show an Incentive\'s details
         * @summary Show Incentive
         * @param {IncentivesApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDetails(requestParameters: IncentivesApiShowDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncentiveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field.  The API doesn\'t support updating paid incentives. 
         * @summary Update Incentive
         * @param {IncentivesApiUpdateIncentiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIncentive(requestParameters: IncentivesApiUpdateIncentiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncentiveResponse>> {
            const updateIncentiveParams: UpdateIncentiveParams = {
                amount: requestParameters.amount,
                amount_tax_type: requestParameters.amount_tax_type,
                effective_date: requestParameters.effective_date,
                note: requestParameters.note,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIncentive(requestParameters.id, updateIncentiveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field.  The API doesn\'t support updating paid incentives. 
         * @summary Update Incentive
         * @param {IncentivesApiUpdateIncentive0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIncentive_1(requestParameters: IncentivesApiUpdateIncentive0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncentiveResponse>> {
            const updateIncentiveParams: UpdateIncentiveParams = {
                amount: requestParameters.amount,
                amount_tax_type: requestParameters.amount_tax_type,
                effective_date: requestParameters.effective_date,
                note: requestParameters.note,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIncentive_1(requestParameters.id, updateIncentiveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IncentivesApi - factory interface
 * @export
 */
export const IncentivesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IncentivesApiFp(configuration)
    return {
        /**
         * Creates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field. 
         * @summary Create Incentive
         * @param {IncentivesApiCreateIncentiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIncentive(requestParameters: IncentivesApiCreateIncentiveRequest, options?: AxiosRequestConfig): AxiosPromise<IncentiveResponse> {
            return localVarFp.createIncentive(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all Incentives of a company
         * @summary List Incentives
         * @param {IncentivesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: IncentivesApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListIncentivesResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an incentive.  `one_time` incentives that have the following status **CANNOT** be deleted: * `processing` * `paid` 
         * @summary Delete an Incentive
         * @param {IncentivesApiRemoveIncentiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIncentive(requestParameters: IncentivesApiRemoveIncentiveRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.removeIncentive(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Show an Incentive\'s details
         * @summary Show Incentive
         * @param {IncentivesApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails(requestParameters: IncentivesApiShowDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<IncentiveResponse> {
            return localVarFp.showDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field.  The API doesn\'t support updating paid incentives. 
         * @summary Update Incentive
         * @param {IncentivesApiUpdateIncentiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIncentive(requestParameters: IncentivesApiUpdateIncentiveRequest, options?: AxiosRequestConfig): AxiosPromise<IncentiveResponse> {
            return localVarFp.updateIncentive(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field.  The API doesn\'t support updating paid incentives. 
         * @summary Update Incentive
         * @param {IncentivesApiUpdateIncentive0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIncentive_1(requestParameters: IncentivesApiUpdateIncentive0Request, options?: AxiosRequestConfig): AxiosPromise<IncentiveResponse> {
            return localVarFp.updateIncentive_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createIncentive operation in IncentivesApi.
 * @export
 * @interface IncentivesApiCreateIncentiveRequest
 */
export type IncentivesApiCreateIncentiveRequest = {
    
} & CreateOneTimeIncentiveParams

/**
 * Request parameters for listAll operation in IncentivesApi.
 * @export
 * @interface IncentivesApiListAllRequest
 */
export type IncentivesApiListAllRequest = {
    
    /**
    * Filter by Employment ID
    * @type {string}
    * @memberof IncentivesApiListAll
    */
    readonly employmentId?: string
    
    /**
    * Filter by Incentive status
    * @type {string}
    * @memberof IncentivesApiListAll
    */
    readonly status?: string
    
    /**
    * Filter by Recurring Incentive id
    * @type {string}
    * @memberof IncentivesApiListAll
    */
    readonly recurringIncentiveId?: string
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof IncentivesApiListAll
    */
    readonly page?: number
    
    /**
    * Change the amount of records returned per page, defaults to 20, limited to 100
    * @type {number}
    * @memberof IncentivesApiListAll
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for removeIncentive operation in IncentivesApi.
 * @export
 * @interface IncentivesApiRemoveIncentiveRequest
 */
export type IncentivesApiRemoveIncentiveRequest = {
    
    /**
    * Incentive ID
    * @type {string}
    * @memberof IncentivesApiRemoveIncentive
    */
    readonly id: string
    
}

/**
 * Request parameters for showDetails operation in IncentivesApi.
 * @export
 * @interface IncentivesApiShowDetailsRequest
 */
export type IncentivesApiShowDetailsRequest = {
    
    /**
    * Incentive ID
    * @type {string}
    * @memberof IncentivesApiShowDetails
    */
    readonly id: string
    
}

/**
 * Request parameters for updateIncentive operation in IncentivesApi.
 * @export
 * @interface IncentivesApiUpdateIncentiveRequest
 */
export type IncentivesApiUpdateIncentiveRequest = {
    
    /**
    * Incentive ID
    * @type {string}
    * @memberof IncentivesApiUpdateIncentive
    */
    readonly id: string
    
} & UpdateIncentiveParams

/**
 * Request parameters for updateIncentive_1 operation in IncentivesApi.
 * @export
 * @interface IncentivesApiUpdateIncentive0Request
 */
export type IncentivesApiUpdateIncentive0Request = {
    
    /**
    * Incentive ID
    * @type {string}
    * @memberof IncentivesApiUpdateIncentive0
    */
    readonly id: string
    
} & UpdateIncentiveParams

/**
 * IncentivesApiGenerated - object-oriented interface
 * @export
 * @class IncentivesApiGenerated
 * @extends {BaseAPI}
 */
export class IncentivesApiGenerated extends BaseAPI {
    /**
     * Creates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field. 
     * @summary Create Incentive
     * @param {IncentivesApiCreateIncentiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncentivesApiGenerated
     */
    public createIncentive(requestParameters: IncentivesApiCreateIncentiveRequest, options?: AxiosRequestConfig) {
        return IncentivesApiFp(this.configuration).createIncentive(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all Incentives of a company
     * @summary List Incentives
     * @param {IncentivesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncentivesApiGenerated
     */
    public listAll(requestParameters: IncentivesApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return IncentivesApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an incentive.  `one_time` incentives that have the following status **CANNOT** be deleted: * `processing` * `paid` 
     * @summary Delete an Incentive
     * @param {IncentivesApiRemoveIncentiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncentivesApiGenerated
     */
    public removeIncentive(requestParameters: IncentivesApiRemoveIncentiveRequest, options?: AxiosRequestConfig) {
        return IncentivesApiFp(this.configuration).removeIncentive(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show an Incentive\'s details
     * @summary Show Incentive
     * @param {IncentivesApiShowDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncentivesApiGenerated
     */
    public showDetails(requestParameters: IncentivesApiShowDetailsRequest, options?: AxiosRequestConfig) {
        return IncentivesApiFp(this.configuration).showDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field.  The API doesn\'t support updating paid incentives. 
     * @summary Update Incentive
     * @param {IncentivesApiUpdateIncentiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncentivesApiGenerated
     */
    public updateIncentive(requestParameters: IncentivesApiUpdateIncentiveRequest, options?: AxiosRequestConfig) {
        return IncentivesApiFp(this.configuration).updateIncentive(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an Incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field.  The API doesn\'t support updating paid incentives. 
     * @summary Update Incentive
     * @param {IncentivesApiUpdateIncentive0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncentivesApiGenerated
     */
    public updateIncentive_1(requestParameters: IncentivesApiUpdateIncentive0Request, options?: AxiosRequestConfig) {
        return IncentivesApiFp(this.configuration).updateIncentive_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { Base64File } from '../models';
// @ts-ignore
import { ConflictResponse } from '../models';
// @ts-ignore
import { ExpenseResponse } from '../models';
// @ts-ignore
import { ForbiddenResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { ListExpenseResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { ParamsToCreateExpense } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
// @ts-ignore
import { UpdateExpenseParams } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExpensesApi - axios parameter creator
 * @export
 */
export const ExpensesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an **approved** expense
         * @summary Create expense
         * @param {ParamsToCreateExpense} [paramsToCreateExpense] Expenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApprovedExpense: async (paramsToCreateExpense?: ParamsToCreateExpense, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paramsToCreateExpense,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paramsToCreateExpense, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *   Downloads an expense receipt.    Deprecated since late February 2024 in favour of **[Download a receipt by id](https://gateway.remote.com/v1/docs/openapi.html)** endpoint. 
         * @summary Download a receipt
         * @param {string} expenseId The expense ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        downloadReceipt: async (expenseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('downloadReceipt', 'expenseId', expenseId)
            const localVarPath = `/v1/expenses/{expense_id}/receipt`
                .replace(`{${"expense_id"}}`, encodeURIComponent(String(expenseId !== undefined ? expenseId : `-expense_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/{expense_id}/receipt',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download a receipt by id.
         * @summary Download a receipt by id
         * @param {string} expenseId The expense ID
         * @param {string} receiptId The receipt ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReceiptById: async (expenseId: string, receiptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('downloadReceiptById', 'expenseId', expenseId)
            // verify required parameter 'receiptId' is not null or undefined
            assertParamExists('downloadReceiptById', 'receiptId', receiptId)
            const localVarPath = `/v1/expenses/{expense_id}/receipts/{receipt_id}`
                .replace(`{${"expense_id"}}`, encodeURIComponent(String(expenseId !== undefined ? expenseId : `-expense_id-`)))
                .replace(`{${"receipt_id"}}`, encodeURIComponent(String(receiptId !== undefined ? receiptId : `-receipt_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/{expense_id}/receipts/{receipt_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all expenses records
         * @summary List expenses
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Change the amount of records returned per page, defaults to 20, limited to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecords: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows a single expense record
         * @summary Show expense
         * @param {string} id Expense ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showRecord: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showRecord', 'id', id)
            const localVarPath = `/v1/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an expense
         * @summary Update an expense
         * @param {string} id Expense ID
         * @param {UpdateExpenseParams} [updateExpenseParams] Expenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpense: async (id: string, updateExpenseParams?: UpdateExpenseParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateExpense', 'id', id)
            const localVarPath = `/v1/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateExpenseParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateExpenseParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an expense
         * @summary Update an expense
         * @param {string} id Expense ID
         * @param {UpdateExpenseParams} [updateExpenseParams] Expenses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord: async (id: string, updateExpenseParams?: UpdateExpenseParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRecord', 'id', id)
            const localVarPath = `/v1/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateExpenseParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateExpenseParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpensesApi - functional programming interface
 * @export
 */
export const ExpensesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpensesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an **approved** expense
         * @summary Create expense
         * @param {ExpensesApiCreateApprovedExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApprovedExpense(requestParameters: ExpensesApiCreateApprovedExpenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseResponse>> {
            const paramsToCreateExpense: ParamsToCreateExpense = {
                title: requestParameters.title,
                amount: requestParameters.amount,
                category: requestParameters.category,
                currency: requestParameters.currency,
                employment_id: requestParameters.employment_id,
                expense_date: requestParameters.expense_date,
                receipt: requestParameters.receipt,
                receipts: requestParameters.receipts,
                reviewed_at: requestParameters.reviewed_at,
                reviewer_id: requestParameters.reviewer_id,
                tax_amount: requestParameters.tax_amount,
                timezone: requestParameters.timezone
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApprovedExpense(paramsToCreateExpense, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *   Downloads an expense receipt.    Deprecated since late February 2024 in favour of **[Download a receipt by id](https://gateway.remote.com/v1/docs/openapi.html)** endpoint. 
         * @summary Download a receipt
         * @param {ExpensesApiDownloadReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async downloadReceipt(requestParameters: ExpensesApiDownloadReceiptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadReceipt(requestParameters.expenseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Download a receipt by id.
         * @summary Download a receipt by id
         * @param {ExpensesApiDownloadReceiptByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadReceiptById(requestParameters: ExpensesApiDownloadReceiptByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadReceiptById(requestParameters.expenseId, requestParameters.receiptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all expenses records
         * @summary List expenses
         * @param {ExpensesApiListRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRecords(requestParameters: ExpensesApiListRecordsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListExpenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRecords(requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows a single expense record
         * @summary Show expense
         * @param {ExpensesApiShowRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showRecord(requestParameters: ExpensesApiShowRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showRecord(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an expense
         * @summary Update an expense
         * @param {ExpensesApiUpdateExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExpense(requestParameters: ExpensesApiUpdateExpenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseResponse>> {
            const updateExpenseParams: UpdateExpenseParams = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExpense(requestParameters.id, updateExpenseParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an expense
         * @summary Update an expense
         * @param {ExpensesApiUpdateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecord(requestParameters: ExpensesApiUpdateRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseResponse>> {
            const updateExpenseParams: UpdateExpenseParams = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecord(requestParameters.id, updateExpenseParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExpensesApi - factory interface
 * @export
 */
export const ExpensesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpensesApiFp(configuration)
    return {
        /**
         * Creates an **approved** expense
         * @summary Create expense
         * @param {ExpensesApiCreateApprovedExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApprovedExpense(requestParameters: ExpensesApiCreateApprovedExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseResponse> {
            return localVarFp.createApprovedExpense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *   Downloads an expense receipt.    Deprecated since late February 2024 in favour of **[Download a receipt by id](https://gateway.remote.com/v1/docs/openapi.html)** endpoint. 
         * @summary Download a receipt
         * @param {ExpensesApiDownloadReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        downloadReceipt(requestParameters: ExpensesApiDownloadReceiptRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.downloadReceipt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Download a receipt by id.
         * @summary Download a receipt by id
         * @param {ExpensesApiDownloadReceiptByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReceiptById(requestParameters: ExpensesApiDownloadReceiptByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.downloadReceiptById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all expenses records
         * @summary List expenses
         * @param {ExpensesApiListRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecords(requestParameters: ExpensesApiListRecordsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListExpenseResponse> {
            return localVarFp.listRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows a single expense record
         * @summary Show expense
         * @param {ExpensesApiShowRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showRecord(requestParameters: ExpensesApiShowRecordRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseResponse> {
            return localVarFp.showRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an expense
         * @summary Update an expense
         * @param {ExpensesApiUpdateExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpense(requestParameters: ExpensesApiUpdateExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseResponse> {
            return localVarFp.updateExpense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an expense
         * @summary Update an expense
         * @param {ExpensesApiUpdateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord(requestParameters: ExpensesApiUpdateRecordRequest, options?: AxiosRequestConfig): AxiosPromise<ExpenseResponse> {
            return localVarFp.updateRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createApprovedExpense operation in ExpensesApi.
 * @export
 * @interface ExpensesApiCreateApprovedExpenseRequest
 */
export type ExpensesApiCreateApprovedExpenseRequest = {
    
} & ParamsToCreateExpense

/**
 * Request parameters for downloadReceipt operation in ExpensesApi.
 * @export
 * @interface ExpensesApiDownloadReceiptRequest
 */
export type ExpensesApiDownloadReceiptRequest = {
    
    /**
    * The expense ID
    * @type {string}
    * @memberof ExpensesApiDownloadReceipt
    */
    readonly expenseId: string
    
}

/**
 * Request parameters for downloadReceiptById operation in ExpensesApi.
 * @export
 * @interface ExpensesApiDownloadReceiptByIdRequest
 */
export type ExpensesApiDownloadReceiptByIdRequest = {
    
    /**
    * The expense ID
    * @type {string}
    * @memberof ExpensesApiDownloadReceiptById
    */
    readonly expenseId: string
    
    /**
    * The receipt ID
    * @type {string}
    * @memberof ExpensesApiDownloadReceiptById
    */
    readonly receiptId: string
    
}

/**
 * Request parameters for listRecords operation in ExpensesApi.
 * @export
 * @interface ExpensesApiListRecordsRequest
 */
export type ExpensesApiListRecordsRequest = {
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof ExpensesApiListRecords
    */
    readonly page?: number
    
    /**
    * Change the amount of records returned per page, defaults to 20, limited to 100
    * @type {number}
    * @memberof ExpensesApiListRecords
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for showRecord operation in ExpensesApi.
 * @export
 * @interface ExpensesApiShowRecordRequest
 */
export type ExpensesApiShowRecordRequest = {
    
    /**
    * Expense ID
    * @type {string}
    * @memberof ExpensesApiShowRecord
    */
    readonly id: string
    
}

/**
 * Request parameters for updateExpense operation in ExpensesApi.
 * @export
 * @interface ExpensesApiUpdateExpenseRequest
 */
export type ExpensesApiUpdateExpenseRequest = {
    
    /**
    * Expense ID
    * @type {string}
    * @memberof ExpensesApiUpdateExpense
    */
    readonly id: string
    
} & UpdateExpenseParams

/**
 * Request parameters for updateRecord operation in ExpensesApi.
 * @export
 * @interface ExpensesApiUpdateRecordRequest
 */
export type ExpensesApiUpdateRecordRequest = {
    
    /**
    * Expense ID
    * @type {string}
    * @memberof ExpensesApiUpdateRecord
    */
    readonly id: string
    
} & UpdateExpenseParams

/**
 * ExpensesApiGenerated - object-oriented interface
 * @export
 * @class ExpensesApiGenerated
 * @extends {BaseAPI}
 */
export class ExpensesApiGenerated extends BaseAPI {
    /**
     * Creates an **approved** expense
     * @summary Create expense
     * @param {ExpensesApiCreateApprovedExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public createApprovedExpense(requestParameters: ExpensesApiCreateApprovedExpenseRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).createApprovedExpense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *   Downloads an expense receipt.    Deprecated since late February 2024 in favour of **[Download a receipt by id](https://gateway.remote.com/v1/docs/openapi.html)** endpoint. 
     * @summary Download a receipt
     * @param {ExpensesApiDownloadReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public downloadReceipt(requestParameters: ExpensesApiDownloadReceiptRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).downloadReceipt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download a receipt by id.
     * @summary Download a receipt by id
     * @param {ExpensesApiDownloadReceiptByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public downloadReceiptById(requestParameters: ExpensesApiDownloadReceiptByIdRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).downloadReceiptById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all expenses records
     * @summary List expenses
     * @param {ExpensesApiListRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public listRecords(requestParameters: ExpensesApiListRecordsRequest = {}, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).listRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows a single expense record
     * @summary Show expense
     * @param {ExpensesApiShowRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public showRecord(requestParameters: ExpensesApiShowRecordRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).showRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an expense
     * @summary Update an expense
     * @param {ExpensesApiUpdateExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public updateExpense(requestParameters: ExpensesApiUpdateExpenseRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).updateExpense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an expense
     * @summary Update an expense
     * @param {ExpensesApiUpdateRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public updateRecord(requestParameters: ExpensesApiUpdateRecordRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).updateRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

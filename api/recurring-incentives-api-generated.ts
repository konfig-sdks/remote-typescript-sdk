/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AmountTaxType } from '../models';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CreateRecurringIncentiveParams } from '../models';
// @ts-ignore
import { DeleteRecurringIncentiveResponse } from '../models';
// @ts-ignore
import { ListRecurringIncentivesResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { RecurringIncentiveResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RecurringIncentivesApi - axios parameter creator
 * @export
 */
export const RecurringIncentivesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Recurring Incentive, that is, a monthly paid incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field. 
         * @summary Create Recurring Incentive
         * @param {CreateRecurringIncentiveParams} [createRecurringIncentiveParams] RecurringIncentive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMonthlyIncentive: async (createRecurringIncentiveParams?: CreateRecurringIncentiveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/incentives/recurring`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createRecurringIncentiveParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives/recurring',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createRecurringIncentiveParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Recurring Incentive, that is, a monthly paid incentive.  Internally, Remote schedules upcoming incentives. As such, when you attempt to delete a recurring incentive, Remote will **ONLY** delete scheduled incentives with the `pending` status.  Incentives payments that are already scheduled and cannot be deleted will be included in the response, in case you need to reference them. 
         * @summary Delete a Recurring Incentive
         * @param {string} id Recurring Incentive ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduled: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteScheduled', 'id', id)
            const localVarPath = `/v1/incentives/recurring/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives/recurring/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Recurring Incentives of a company. 
         * @summary List Recurring Incentive
         * @param {string} [status] Filter by recurring incentive status: active or deactive.
         * @param {string} [type] Filter by recurring incentive type.
         * @param {string} [note] Filter by recurring incentives that contain the value in their notes.
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Change the amount of records returned per page, defaults to 20, limited to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIncentives: async (status?: string, type?: string, note?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/incentives/recurring`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (note !== undefined) {
                localVarQueryParameter['note'] = note;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/incentives/recurring',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecurringIncentivesApi - functional programming interface
 * @export
 */
export const RecurringIncentivesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecurringIncentivesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Recurring Incentive, that is, a monthly paid incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field. 
         * @summary Create Recurring Incentive
         * @param {RecurringIncentivesApiCreateMonthlyIncentiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMonthlyIncentive(requestParameters: RecurringIncentivesApiCreateMonthlyIncentiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringIncentiveResponse>> {
            const createRecurringIncentiveParams: CreateRecurringIncentiveParams = {
                amount: requestParameters.amount,
                amount_tax_type: requestParameters.amount_tax_type,
                duration_in_months: requestParameters.duration_in_months,
                effective_date: requestParameters.effective_date,
                employment_id: requestParameters.employment_id,
                note: requestParameters.note,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMonthlyIncentive(createRecurringIncentiveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Recurring Incentive, that is, a monthly paid incentive.  Internally, Remote schedules upcoming incentives. As such, when you attempt to delete a recurring incentive, Remote will **ONLY** delete scheduled incentives with the `pending` status.  Incentives payments that are already scheduled and cannot be deleted will be included in the response, in case you need to reference them. 
         * @summary Delete a Recurring Incentive
         * @param {RecurringIncentivesApiDeleteScheduledRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduled(requestParameters: RecurringIncentivesApiDeleteScheduledRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteRecurringIncentiveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScheduled(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all Recurring Incentives of a company. 
         * @summary List Recurring Incentive
         * @param {RecurringIncentivesApiListIncentivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIncentives(requestParameters: RecurringIncentivesApiListIncentivesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRecurringIncentivesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIncentives(requestParameters.status, requestParameters.type, requestParameters.note, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecurringIncentivesApi - factory interface
 * @export
 */
export const RecurringIncentivesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecurringIncentivesApiFp(configuration)
    return {
        /**
         * Create a Recurring Incentive, that is, a monthly paid incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field. 
         * @summary Create Recurring Incentive
         * @param {RecurringIncentivesApiCreateMonthlyIncentiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMonthlyIncentive(requestParameters: RecurringIncentivesApiCreateMonthlyIncentiveRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringIncentiveResponse> {
            return localVarFp.createMonthlyIncentive(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Recurring Incentive, that is, a monthly paid incentive.  Internally, Remote schedules upcoming incentives. As such, when you attempt to delete a recurring incentive, Remote will **ONLY** delete scheduled incentives with the `pending` status.  Incentives payments that are already scheduled and cannot be deleted will be included in the response, in case you need to reference them. 
         * @summary Delete a Recurring Incentive
         * @param {RecurringIncentivesApiDeleteScheduledRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduled(requestParameters: RecurringIncentivesApiDeleteScheduledRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteRecurringIncentiveResponse> {
            return localVarFp.deleteScheduled(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Recurring Incentives of a company. 
         * @summary List Recurring Incentive
         * @param {RecurringIncentivesApiListIncentivesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIncentives(requestParameters: RecurringIncentivesApiListIncentivesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListRecurringIncentivesResponse> {
            return localVarFp.listIncentives(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMonthlyIncentive operation in RecurringIncentivesApi.
 * @export
 * @interface RecurringIncentivesApiCreateMonthlyIncentiveRequest
 */
export type RecurringIncentivesApiCreateMonthlyIncentiveRequest = {
    
} & CreateRecurringIncentiveParams

/**
 * Request parameters for deleteScheduled operation in RecurringIncentivesApi.
 * @export
 * @interface RecurringIncentivesApiDeleteScheduledRequest
 */
export type RecurringIncentivesApiDeleteScheduledRequest = {
    
    /**
    * Recurring Incentive ID
    * @type {string}
    * @memberof RecurringIncentivesApiDeleteScheduled
    */
    readonly id: string
    
}

/**
 * Request parameters for listIncentives operation in RecurringIncentivesApi.
 * @export
 * @interface RecurringIncentivesApiListIncentivesRequest
 */
export type RecurringIncentivesApiListIncentivesRequest = {
    
    /**
    * Filter by recurring incentive status: active or deactive.
    * @type {string}
    * @memberof RecurringIncentivesApiListIncentives
    */
    readonly status?: string
    
    /**
    * Filter by recurring incentive type.
    * @type {string}
    * @memberof RecurringIncentivesApiListIncentives
    */
    readonly type?: string
    
    /**
    * Filter by recurring incentives that contain the value in their notes.
    * @type {string}
    * @memberof RecurringIncentivesApiListIncentives
    */
    readonly note?: string
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof RecurringIncentivesApiListIncentives
    */
    readonly page?: number
    
    /**
    * Change the amount of records returned per page, defaults to 20, limited to 100
    * @type {number}
    * @memberof RecurringIncentivesApiListIncentives
    */
    readonly pageSize?: number
    
}

/**
 * RecurringIncentivesApiGenerated - object-oriented interface
 * @export
 * @class RecurringIncentivesApiGenerated
 * @extends {BaseAPI}
 */
export class RecurringIncentivesApiGenerated extends BaseAPI {
    /**
     * Create a Recurring Incentive, that is, a monthly paid incentive.  Incentives use the currency of the employment specified provided in the `employment_id` field. 
     * @summary Create Recurring Incentive
     * @param {RecurringIncentivesApiCreateMonthlyIncentiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringIncentivesApiGenerated
     */
    public createMonthlyIncentive(requestParameters: RecurringIncentivesApiCreateMonthlyIncentiveRequest, options?: AxiosRequestConfig) {
        return RecurringIncentivesApiFp(this.configuration).createMonthlyIncentive(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Recurring Incentive, that is, a monthly paid incentive.  Internally, Remote schedules upcoming incentives. As such, when you attempt to delete a recurring incentive, Remote will **ONLY** delete scheduled incentives with the `pending` status.  Incentives payments that are already scheduled and cannot be deleted will be included in the response, in case you need to reference them. 
     * @summary Delete a Recurring Incentive
     * @param {RecurringIncentivesApiDeleteScheduledRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringIncentivesApiGenerated
     */
    public deleteScheduled(requestParameters: RecurringIncentivesApiDeleteScheduledRequest, options?: AxiosRequestConfig) {
        return RecurringIncentivesApiFp(this.configuration).deleteScheduled(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Recurring Incentives of a company. 
     * @summary List Recurring Incentive
     * @param {RecurringIncentivesApiListIncentivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecurringIncentivesApiGenerated
     */
    public listIncentives(requestParameters: RecurringIncentivesApiListIncentivesRequest = {}, options?: AxiosRequestConfig) {
        return RecurringIncentivesApiFp(this.configuration).listIncentives(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

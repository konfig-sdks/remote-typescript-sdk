/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CompleteOnboarding } from '../models';
// @ts-ignore
import { ConflictResponse } from '../models';
// @ts-ignore
import { Country } from '../models';
// @ts-ignore
import { EmploymentBasicParams } from '../models';
// @ts-ignore
import { EmploymentCreationResponse } from '../models';
// @ts-ignore
import { EmploymentFullParams } from '../models';
// @ts-ignore
import { EmploymentResponse } from '../models';
// @ts-ignore
import { ListEmploymentsResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { PricingPlanDetails } from '../models';
// @ts-ignore
import { SuccessResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmploymentsApi - axios parameter creator
 * @export
 */
export const EmploymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Completes the employee onboarding. When all tasks are completed, the employee is marked as in `review` status
         * @summary Complete onboarding
         * @param {CompleteOnboarding} completeOnboarding Employment slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeOnboarding: async (completeOnboarding: CompleteOnboarding, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'completeOnboarding' is not null or undefined
            assertParamExists('completeOnboarding', 'completeOnboarding', completeOnboarding)
            const localVarPath = `/v1/ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: completeOnboarding,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/ready',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(completeOnboarding, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an employment. We support creating employees and contractors.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Create employment
         * @param {EmploymentBasicParams} [employmentBasicParams] Employment params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployment: async (employmentBasicParams?: EmploymentBasicParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/employments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employmentBasicParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employmentBasicParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows all the information of an employment.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Show employment
         * @param {string} employmentId Employment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmploymentInfo: async (employmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('getEmploymentInfo', 'employmentId', employmentId)
            const localVarPath = `/v1/employments/{employment_id}`
                .replace(`{${"employment_id"}}`, encodeURIComponent(String(employmentId !== undefined ? employmentId : `-employment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employments/{employment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite an employment to start the self-enrollment.  Requirements for the invitation to succeed:  * Employment needs to have the following JSON Schema forms filled: `contract_details` and `pricing_plan_details` * `provisional_start_date` must consider the minimum onbaording time of the employment\'s country  If there are validations errors, they are returned with a Conflict HTTP Status (409) and a descriptive message. HTTP Status OK (200) is returned in case of success. 
         * @summary Invite employment
         * @param {string} employmentId Employment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteStartEnrollment: async (employmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('inviteStartEnrollment', 'employmentId', employmentId)
            const localVarPath = `/v1/employments/{employment_id}/invite`
                .replace(`{${"employment_id"}}`, encodeURIComponent(String(employmentId !== undefined ? employmentId : `-employment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employments/{employment_id}/invite',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all employments, except for the deleted ones.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary List employments
         * @param {string} [companyId] Company ID
         * @param {string} [email] Filters the results by employments whose login email matches the value
         * @param {string} [status] Filters the results by employments whose status matches the value
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Change the amount of records returned per page, defaults to 20, limited to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (companyId?: string, email?: string, status?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/employments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an employment.  **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the `contract_details` and `pricing_plan_details`, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the `employment_lifecycle_stage` field value. If its value is `employee_self_enrollment`, it means the employee has received an email to join the Remote platform at their `personal_email`.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it\'s currently not supported. 
         * @summary Update employment
         * @param {string} employmentId Employment ID
         * @param {EmploymentFullParams} [employmentFullParams] Employment params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateData: async (employmentId: string, employmentFullParams?: EmploymentFullParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('updateData', 'employmentId', employmentId)
            const localVarPath = `/v1/employments/{employment_id}`
                .replace(`{${"employment_id"}}`, encodeURIComponent(String(employmentId !== undefined ? employmentId : `-employment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employmentFullParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employments/{employment_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employmentFullParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an employment.  **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the `contract_details` and `pricing_plan_details`, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the `employment_lifecycle_stage` field value. If its value is `employee_self_enrollment`, it means the employee has received an email to join the Remote platform at their `personal_email`.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it\'s currently not supported. 
         * @summary Update employment
         * @param {string} employmentId Employment ID
         * @param {EmploymentFullParams} [employmentFullParams] Employment params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails: async (employmentId: string, employmentFullParams?: EmploymentFullParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('updateDetails', 'employmentId', employmentId)
            const localVarPath = `/v1/employments/{employment_id}`
                .replace(`{${"employment_id"}}`, encodeURIComponent(String(employmentId !== undefined ? employmentId : `-employment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employmentFullParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employments/{employment_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employmentFullParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmploymentsApi - functional programming interface
 * @export
 */
export const EmploymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmploymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Completes the employee onboarding. When all tasks are completed, the employee is marked as in `review` status
         * @summary Complete onboarding
         * @param {EmploymentsApiCompleteOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeOnboarding(requestParameters: EmploymentsApiCompleteOnboardingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponse>> {
            const completeOnboarding: CompleteOnboarding = {
                employment_id: requestParameters.employment_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeOnboarding(completeOnboarding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an employment. We support creating employees and contractors.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Create employment
         * @param {EmploymentsApiCreateEmploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployment(requestParameters: EmploymentsApiCreateEmploymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentCreationResponse>> {
            const employmentBasicParams: EmploymentBasicParams = {
                basic_information: requestParameters.basic_information,
                country_code: requestParameters.country_code,
                full_name: requestParameters.full_name,
                job_title: requestParameters.job_title,
                personal_email: requestParameters.personal_email,
                provisional_start_date: requestParameters.provisional_start_date,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployment(employmentBasicParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows all the information of an employment.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Show employment
         * @param {EmploymentsApiGetEmploymentInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmploymentInfo(requestParameters: EmploymentsApiGetEmploymentInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmploymentInfo(requestParameters.employmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invite an employment to start the self-enrollment.  Requirements for the invitation to succeed:  * Employment needs to have the following JSON Schema forms filled: `contract_details` and `pricing_plan_details` * `provisional_start_date` must consider the minimum onbaording time of the employment\'s country  If there are validations errors, they are returned with a Conflict HTTP Status (409) and a descriptive message. HTTP Status OK (200) is returned in case of success. 
         * @summary Invite employment
         * @param {EmploymentsApiInviteStartEnrollmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteStartEnrollment(requestParameters: EmploymentsApiInviteStartEnrollmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteStartEnrollment(requestParameters.employmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all employments, except for the deleted ones.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary List employments
         * @param {EmploymentsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: EmploymentsApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmploymentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.companyId, requestParameters.email, requestParameters.status, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an employment.  **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the `contract_details` and `pricing_plan_details`, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the `employment_lifecycle_stage` field value. If its value is `employee_self_enrollment`, it means the employee has received an email to join the Remote platform at their `personal_email`.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it\'s currently not supported. 
         * @summary Update employment
         * @param {EmploymentsApiUpdateDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateData(requestParameters: EmploymentsApiUpdateDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponse>> {
            const employmentFullParams: EmploymentFullParams = {
                address_details: requestParameters.address_details,
                administrative_details: requestParameters.administrative_details,
                bank_account_details: requestParameters.bank_account_details,
                basic_information: requestParameters.basic_information,
                billing_address_details: requestParameters.billing_address_details,
                company_id: requestParameters.company_id,
                contract_details: requestParameters.contract_details,
                country_code: requestParameters.country_code,
                department_id: requestParameters.department_id,
                emergency_contact_details: requestParameters.emergency_contact_details,
                full_name: requestParameters.full_name,
                job_title: requestParameters.job_title,
                manager: requestParameters.manager,
                personal_details: requestParameters.personal_details,
                personal_email: requestParameters.personal_email,
                pricing_plan_details: requestParameters.pricing_plan_details,
                provisional_start_date: requestParameters.provisional_start_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateData(requestParameters.employmentId, employmentFullParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an employment.  **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the `contract_details` and `pricing_plan_details`, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the `employment_lifecycle_stage` field value. If its value is `employee_self_enrollment`, it means the employee has received an email to join the Remote platform at their `personal_email`.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it\'s currently not supported. 
         * @summary Update employment
         * @param {EmploymentsApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetails(requestParameters: EmploymentsApiUpdateDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentResponse>> {
            const employmentFullParams: EmploymentFullParams = {
                address_details: requestParameters.address_details,
                administrative_details: requestParameters.administrative_details,
                bank_account_details: requestParameters.bank_account_details,
                basic_information: requestParameters.basic_information,
                billing_address_details: requestParameters.billing_address_details,
                company_id: requestParameters.company_id,
                contract_details: requestParameters.contract_details,
                country_code: requestParameters.country_code,
                department_id: requestParameters.department_id,
                emergency_contact_details: requestParameters.emergency_contact_details,
                full_name: requestParameters.full_name,
                job_title: requestParameters.job_title,
                manager: requestParameters.manager,
                personal_details: requestParameters.personal_details,
                personal_email: requestParameters.personal_email,
                pricing_plan_details: requestParameters.pricing_plan_details,
                provisional_start_date: requestParameters.provisional_start_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetails(requestParameters.employmentId, employmentFullParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmploymentsApi - factory interface
 * @export
 */
export const EmploymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmploymentsApiFp(configuration)
    return {
        /**
         * Completes the employee onboarding. When all tasks are completed, the employee is marked as in `review` status
         * @summary Complete onboarding
         * @param {EmploymentsApiCompleteOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeOnboarding(requestParameters: EmploymentsApiCompleteOnboardingRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponse> {
            return localVarFp.completeOnboarding(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an employment. We support creating employees and contractors.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Create employment
         * @param {EmploymentsApiCreateEmploymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployment(requestParameters: EmploymentsApiCreateEmploymentRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentCreationResponse> {
            return localVarFp.createEmployment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows all the information of an employment.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary Show employment
         * @param {EmploymentsApiGetEmploymentInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmploymentInfo(requestParameters: EmploymentsApiGetEmploymentInfoRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponse> {
            return localVarFp.getEmploymentInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite an employment to start the self-enrollment.  Requirements for the invitation to succeed:  * Employment needs to have the following JSON Schema forms filled: `contract_details` and `pricing_plan_details` * `provisional_start_date` must consider the minimum onbaording time of the employment\'s country  If there are validations errors, they are returned with a Conflict HTTP Status (409) and a descriptive message. HTTP Status OK (200) is returned in case of success. 
         * @summary Invite employment
         * @param {EmploymentsApiInviteStartEnrollmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteStartEnrollment(requestParameters: EmploymentsApiInviteStartEnrollmentRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.inviteStartEnrollment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all employments, except for the deleted ones.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
         * @summary List employments
         * @param {EmploymentsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: EmploymentsApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListEmploymentsResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an employment.  **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the `contract_details` and `pricing_plan_details`, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the `employment_lifecycle_stage` field value. If its value is `employee_self_enrollment`, it means the employee has received an email to join the Remote platform at their `personal_email`.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it\'s currently not supported. 
         * @summary Update employment
         * @param {EmploymentsApiUpdateDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateData(requestParameters: EmploymentsApiUpdateDataRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponse> {
            return localVarFp.updateData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an employment.  **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the `contract_details` and `pricing_plan_details`, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the `employment_lifecycle_stage` field value. If its value is `employee_self_enrollment`, it means the employee has received an email to join the Remote platform at their `personal_email`.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it\'s currently not supported. 
         * @summary Update employment
         * @param {EmploymentsApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails(requestParameters: EmploymentsApiUpdateDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentResponse> {
            return localVarFp.updateDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for completeOnboarding operation in EmploymentsApi.
 * @export
 * @interface EmploymentsApiCompleteOnboardingRequest
 */
export type EmploymentsApiCompleteOnboardingRequest = {
    
} & CompleteOnboarding

/**
 * Request parameters for createEmployment operation in EmploymentsApi.
 * @export
 * @interface EmploymentsApiCreateEmploymentRequest
 */
export type EmploymentsApiCreateEmploymentRequest = {
    
} & EmploymentBasicParams

/**
 * Request parameters for getEmploymentInfo operation in EmploymentsApi.
 * @export
 * @interface EmploymentsApiGetEmploymentInfoRequest
 */
export type EmploymentsApiGetEmploymentInfoRequest = {
    
    /**
    * Employment ID
    * @type {string}
    * @memberof EmploymentsApiGetEmploymentInfo
    */
    readonly employmentId: string
    
}

/**
 * Request parameters for inviteStartEnrollment operation in EmploymentsApi.
 * @export
 * @interface EmploymentsApiInviteStartEnrollmentRequest
 */
export type EmploymentsApiInviteStartEnrollmentRequest = {
    
    /**
    * Employment ID
    * @type {string}
    * @memberof EmploymentsApiInviteStartEnrollment
    */
    readonly employmentId: string
    
}

/**
 * Request parameters for listAll operation in EmploymentsApi.
 * @export
 * @interface EmploymentsApiListAllRequest
 */
export type EmploymentsApiListAllRequest = {
    
    /**
    * Company ID
    * @type {string}
    * @memberof EmploymentsApiListAll
    */
    readonly companyId?: string
    
    /**
    * Filters the results by employments whose login email matches the value
    * @type {string}
    * @memberof EmploymentsApiListAll
    */
    readonly email?: string
    
    /**
    * Filters the results by employments whose status matches the value
    * @type {string}
    * @memberof EmploymentsApiListAll
    */
    readonly status?: string
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof EmploymentsApiListAll
    */
    readonly page?: number
    
    /**
    * Change the amount of records returned per page, defaults to 20, limited to 100
    * @type {number}
    * @memberof EmploymentsApiListAll
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for updateData operation in EmploymentsApi.
 * @export
 * @interface EmploymentsApiUpdateDataRequest
 */
export type EmploymentsApiUpdateDataRequest = {
    
    /**
    * Employment ID
    * @type {string}
    * @memberof EmploymentsApiUpdateData
    */
    readonly employmentId: string
    
} & EmploymentFullParams

/**
 * Request parameters for updateDetails operation in EmploymentsApi.
 * @export
 * @interface EmploymentsApiUpdateDetailsRequest
 */
export type EmploymentsApiUpdateDetailsRequest = {
    
    /**
    * Employment ID
    * @type {string}
    * @memberof EmploymentsApiUpdateDetails
    */
    readonly employmentId: string
    
} & EmploymentFullParams

/**
 * EmploymentsApiGenerated - object-oriented interface
 * @export
 * @class EmploymentsApiGenerated
 * @extends {BaseAPI}
 */
export class EmploymentsApiGenerated extends BaseAPI {
    /**
     * Completes the employee onboarding. When all tasks are completed, the employee is marked as in `review` status
     * @summary Complete onboarding
     * @param {EmploymentsApiCompleteOnboardingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentsApiGenerated
     */
    public completeOnboarding(requestParameters: EmploymentsApiCompleteOnboardingRequest, options?: AxiosRequestConfig) {
        return EmploymentsApiFp(this.configuration).completeOnboarding(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an employment. We support creating employees and contractors.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @summary Create employment
     * @param {EmploymentsApiCreateEmploymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentsApiGenerated
     */
    public createEmployment(requestParameters: EmploymentsApiCreateEmploymentRequest, options?: AxiosRequestConfig) {
        return EmploymentsApiFp(this.configuration).createEmployment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows all the information of an employment.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @summary Show employment
     * @param {EmploymentsApiGetEmploymentInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentsApiGenerated
     */
    public getEmploymentInfo(requestParameters: EmploymentsApiGetEmploymentInfoRequest, options?: AxiosRequestConfig) {
        return EmploymentsApiFp(this.configuration).getEmploymentInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invite an employment to start the self-enrollment.  Requirements for the invitation to succeed:  * Employment needs to have the following JSON Schema forms filled: `contract_details` and `pricing_plan_details` * `provisional_start_date` must consider the minimum onbaording time of the employment\'s country  If there are validations errors, they are returned with a Conflict HTTP Status (409) and a descriptive message. HTTP Status OK (200) is returned in case of success. 
     * @summary Invite employment
     * @param {EmploymentsApiInviteStartEnrollmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentsApiGenerated
     */
    public inviteStartEnrollment(requestParameters: EmploymentsApiInviteStartEnrollmentRequest, options?: AxiosRequestConfig) {
        return EmploymentsApiFp(this.configuration).inviteStartEnrollment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all employments, except for the deleted ones.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @summary List employments
     * @param {EmploymentsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentsApiGenerated
     */
    public listAll(requestParameters: EmploymentsApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return EmploymentsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an employment.  **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the `contract_details` and `pricing_plan_details`, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the `employment_lifecycle_stage` field value. If its value is `employee_self_enrollment`, it means the employee has received an email to join the Remote platform at their `personal_email`.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it\'s currently not supported. 
     * @summary Update employment
     * @param {EmploymentsApiUpdateDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentsApiGenerated
     */
    public updateData(requestParameters: EmploymentsApiUpdateDataRequest, options?: AxiosRequestConfig) {
        return EmploymentsApiFp(this.configuration).updateData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an employment.  **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote\'s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\"Show form schema\"_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the `contract_details` and `pricing_plan_details`, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the `employment_lifecycle_stage` field value. If its value is `employee_self_enrollment`, it means the employee has received an email to join the Remote platform at their `personal_email`.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it\'s currently not supported. 
     * @summary Update employment
     * @param {EmploymentsApiUpdateDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentsApiGenerated
     */
    public updateDetails(requestParameters: EmploymentsApiUpdateDetailsRequest, options?: AxiosRequestConfig) {
        return EmploymentsApiFp(this.configuration).updateDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

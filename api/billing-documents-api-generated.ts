/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { BillingDocumentResponse } from '../models';
// @ts-ignore
import { BillingDocumentsResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BillingDocumentsApi - axios parameter creator
 * @export
 */
export const BillingDocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Downloads a billing document PDF
         * @summary Download a billing document PDF
         * @param {string} billingDocumentId The billing document\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPdf: async (billingDocumentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billingDocumentId' is not null or undefined
            assertParamExists('downloadPdf', 'billingDocumentId', billingDocumentId)
            const localVarPath = `/v1/billing-documents/{billing_document_id}/pdf`
                .replace(`{${"billing_document_id"}}`, encodeURIComponent(String(billingDocumentId !== undefined ? billingDocumentId : `-billing_document_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/billing-documents/{billing_document_id}/pdf',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List billing documents for a company
         * @summary List Billing Documents
         * @param {string} [period] The month for the billing documents (in ISO-8601 format)
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Change the amount of records returned per page, defaults to 20, limited to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (period?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/billing-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/billing-documents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows a billing document details.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Show Billing Document
         * @param {string} billingDocumentId The billing document\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails: async (billingDocumentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billingDocumentId' is not null or undefined
            assertParamExists('showDetails', 'billingDocumentId', billingDocumentId)
            const localVarPath = `/v1/billing-documents/{billing_document_id}`
                .replace(`{${"billing_document_id"}}`, encodeURIComponent(String(billingDocumentId !== undefined ? billingDocumentId : `-billing_document_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/billing-documents/{billing_document_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillingDocumentsApi - functional programming interface
 * @export
 */
export const BillingDocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillingDocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Downloads a billing document PDF
         * @summary Download a billing document PDF
         * @param {BillingDocumentsApiDownloadPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadPdf(requestParameters: BillingDocumentsApiDownloadPdfRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadPdf(requestParameters.billingDocumentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List billing documents for a company
         * @summary List Billing Documents
         * @param {BillingDocumentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: BillingDocumentsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingDocumentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.period, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows a billing document details.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Show Billing Document
         * @param {BillingDocumentsApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDetails(requestParameters: BillingDocumentsApiShowDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDetails(requestParameters.billingDocumentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BillingDocumentsApi - factory interface
 * @export
 */
export const BillingDocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillingDocumentsApiFp(configuration)
    return {
        /**
         * Downloads a billing document PDF
         * @summary Download a billing document PDF
         * @param {BillingDocumentsApiDownloadPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPdf(requestParameters: BillingDocumentsApiDownloadPdfRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.downloadPdf(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List billing documents for a company
         * @summary List Billing Documents
         * @param {BillingDocumentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: BillingDocumentsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BillingDocumentsResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows a billing document details.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Show Billing Document
         * @param {BillingDocumentsApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails(requestParameters: BillingDocumentsApiShowDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<BillingDocumentResponse> {
            return localVarFp.showDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadPdf operation in BillingDocumentsApi.
 * @export
 * @interface BillingDocumentsApiDownloadPdfRequest
 */
export type BillingDocumentsApiDownloadPdfRequest = {
    
    /**
    * The billing document\'s ID
    * @type {string}
    * @memberof BillingDocumentsApiDownloadPdf
    */
    readonly billingDocumentId: string
    
}

/**
 * Request parameters for list operation in BillingDocumentsApi.
 * @export
 * @interface BillingDocumentsApiListRequest
 */
export type BillingDocumentsApiListRequest = {
    
    /**
    * The month for the billing documents (in ISO-8601 format)
    * @type {string}
    * @memberof BillingDocumentsApiList
    */
    readonly period?: string
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof BillingDocumentsApiList
    */
    readonly page?: number
    
    /**
    * Change the amount of records returned per page, defaults to 20, limited to 100
    * @type {number}
    * @memberof BillingDocumentsApiList
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for showDetails operation in BillingDocumentsApi.
 * @export
 * @interface BillingDocumentsApiShowDetailsRequest
 */
export type BillingDocumentsApiShowDetailsRequest = {
    
    /**
    * The billing document\'s ID
    * @type {string}
    * @memberof BillingDocumentsApiShowDetails
    */
    readonly billingDocumentId: string
    
}

/**
 * BillingDocumentsApiGenerated - object-oriented interface
 * @export
 * @class BillingDocumentsApiGenerated
 * @extends {BaseAPI}
 */
export class BillingDocumentsApiGenerated extends BaseAPI {
    /**
     * Downloads a billing document PDF
     * @summary Download a billing document PDF
     * @param {BillingDocumentsApiDownloadPdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingDocumentsApiGenerated
     */
    public downloadPdf(requestParameters: BillingDocumentsApiDownloadPdfRequest, options?: AxiosRequestConfig) {
        return BillingDocumentsApiFp(this.configuration).downloadPdf(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List billing documents for a company
     * @summary List Billing Documents
     * @param {BillingDocumentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingDocumentsApiGenerated
     */
    public list(requestParameters: BillingDocumentsApiListRequest = {}, options?: AxiosRequestConfig) {
        return BillingDocumentsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows a billing document details.  Please contact api-support@remote.com to request access to this endpoint. 
     * @summary Show Billing Document
     * @param {BillingDocumentsApiShowDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingDocumentsApiGenerated
     */
    public showDetails(requestParameters: BillingDocumentsApiShowDetailsRequest, options?: AxiosRequestConfig) {
        return BillingDocumentsApiFp(this.configuration).showDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { CreateOffboardingParams } from '../models';
// @ts-ignore
import { ListOffboardingResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { OffboardingResponse } from '../models';
// @ts-ignore
import { RequestError } from '../models';
// @ts-ignore
import { TerminationDetailsParams } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OffboardingApi - axios parameter creator
 * @export
 */
export const OffboardingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an Offboarding request. 
         * @summary Create Offboarding
         * @param {CreateOffboardingParams} [createOffboardingParams] Incentive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest: async (createOffboardingParams?: CreateOffboardingParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/offboardings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createOffboardingParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/offboardings',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createOffboardingParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists Offboarding requests.
         * @summary List Offboarding
         * @param {string} [employmentId] Filter by Employment ID
         * @param {string} [type] Filter by offboarding type
         * @param {string} [includeConfidential] By default, the results do not include confidential termination requests. Send &#x60;include_confidential&#x3D;true&#x60; to include confidential requests in the response. 
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Change the amount of records returned per page, defaults to 20, limited to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequests: async (employmentId?: string, type?: string, includeConfidential?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/offboardings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (employmentId !== undefined) {
                localVarQueryParameter['employment_id'] = employmentId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (includeConfidential !== undefined) {
                localVarQueryParameter['include_confidential'] = includeConfidential;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/offboardings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows an Offboarding request.
         * @summary Show Offboarding
         * @param {string} id Offboarding request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showRequest: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showRequest', 'id', id)
            const localVarPath = `/v1/offboardings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/offboardings/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OffboardingApi - functional programming interface
 * @export
 */
export const OffboardingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OffboardingApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an Offboarding request. 
         * @summary Create Offboarding
         * @param {OffboardingApiCreateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRequest(requestParameters: OffboardingApiCreateRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffboardingResponse>> {
            const createOffboardingParams: CreateOffboardingParams = {
                employment_id: requestParameters.employment_id,
                termination_details: requestParameters.termination_details,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRequest(createOffboardingParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists Offboarding requests.
         * @summary List Offboarding
         * @param {OffboardingApiListRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRequests(requestParameters: OffboardingApiListRequestsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOffboardingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRequests(requestParameters.employmentId, requestParameters.type, requestParameters.includeConfidential, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows an Offboarding request.
         * @summary Show Offboarding
         * @param {OffboardingApiShowRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showRequest(requestParameters: OffboardingApiShowRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OffboardingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showRequest(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OffboardingApi - factory interface
 * @export
 */
export const OffboardingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OffboardingApiFp(configuration)
    return {
        /**
         * Creates an Offboarding request. 
         * @summary Create Offboarding
         * @param {OffboardingApiCreateRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequest(requestParameters: OffboardingApiCreateRequestRequest, options?: AxiosRequestConfig): AxiosPromise<OffboardingResponse> {
            return localVarFp.createRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists Offboarding requests.
         * @summary List Offboarding
         * @param {OffboardingApiListRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequests(requestParameters: OffboardingApiListRequestsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListOffboardingResponse> {
            return localVarFp.listRequests(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows an Offboarding request.
         * @summary Show Offboarding
         * @param {OffboardingApiShowRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showRequest(requestParameters: OffboardingApiShowRequestRequest, options?: AxiosRequestConfig): AxiosPromise<OffboardingResponse> {
            return localVarFp.showRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRequest operation in OffboardingApi.
 * @export
 * @interface OffboardingApiCreateRequestRequest
 */
export type OffboardingApiCreateRequestRequest = {
    
} & CreateOffboardingParams

/**
 * Request parameters for listRequests operation in OffboardingApi.
 * @export
 * @interface OffboardingApiListRequestsRequest
 */
export type OffboardingApiListRequestsRequest = {
    
    /**
    * Filter by Employment ID
    * @type {string}
    * @memberof OffboardingApiListRequests
    */
    readonly employmentId?: string
    
    /**
    * Filter by offboarding type
    * @type {string}
    * @memberof OffboardingApiListRequests
    */
    readonly type?: string
    
    /**
    * By default, the results do not include confidential termination requests. Send `include_confidential=true` to include confidential requests in the response. 
    * @type {string}
    * @memberof OffboardingApiListRequests
    */
    readonly includeConfidential?: string
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof OffboardingApiListRequests
    */
    readonly page?: number
    
    /**
    * Change the amount of records returned per page, defaults to 20, limited to 100
    * @type {number}
    * @memberof OffboardingApiListRequests
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for showRequest operation in OffboardingApi.
 * @export
 * @interface OffboardingApiShowRequestRequest
 */
export type OffboardingApiShowRequestRequest = {
    
    /**
    * Offboarding request ID
    * @type {string}
    * @memberof OffboardingApiShowRequest
    */
    readonly id: string
    
}

/**
 * OffboardingApiGenerated - object-oriented interface
 * @export
 * @class OffboardingApiGenerated
 * @extends {BaseAPI}
 */
export class OffboardingApiGenerated extends BaseAPI {
    /**
     * Creates an Offboarding request. 
     * @summary Create Offboarding
     * @param {OffboardingApiCreateRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffboardingApiGenerated
     */
    public createRequest(requestParameters: OffboardingApiCreateRequestRequest, options?: AxiosRequestConfig) {
        return OffboardingApiFp(this.configuration).createRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists Offboarding requests.
     * @summary List Offboarding
     * @param {OffboardingApiListRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffboardingApiGenerated
     */
    public listRequests(requestParameters: OffboardingApiListRequestsRequest = {}, options?: AxiosRequestConfig) {
        return OffboardingApiFp(this.configuration).listRequests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows an Offboarding request.
     * @summary Show Offboarding
     * @param {OffboardingApiShowRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffboardingApiGenerated
     */
    public showRequest(requestParameters: OffboardingApiShowRequestRequest, options?: AxiosRequestConfig) {
        return OffboardingApiFp(this.configuration).showRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

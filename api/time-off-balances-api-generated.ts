/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { TimeoffBalanceNotFoundResponse } from '../models';
// @ts-ignore
import { TimeoffBalanceResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeOffBalancesApi - axios parameter creator
 * @export
 */
export const TimeOffBalancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Shows the time off balance for the given employment_id.  Please note, this endpoint is only supported for employments in certain countries. For countries where it\'s not supported, this endpoint will respond with a `404 Not Found`. 
         * @summary Show Time Off Balance
         * @param {string} employmentId Employment ID for which to show the time off balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showBalance: async (employmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('showBalance', 'employmentId', employmentId)
            const localVarPath = `/v1/timeoff-balances/{employment_id}`
                .replace(`{${"employment_id"}}`, encodeURIComponent(String(employmentId !== undefined ? employmentId : `-employment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/timeoff-balances/{employment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeOffBalancesApi - functional programming interface
 * @export
 */
export const TimeOffBalancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeOffBalancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Shows the time off balance for the given employment_id.  Please note, this endpoint is only supported for employments in certain countries. For countries where it\'s not supported, this endpoint will respond with a `404 Not Found`. 
         * @summary Show Time Off Balance
         * @param {TimeOffBalancesApiShowBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showBalance(requestParameters: TimeOffBalancesApiShowBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeoffBalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showBalance(requestParameters.employmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeOffBalancesApi - factory interface
 * @export
 */
export const TimeOffBalancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeOffBalancesApiFp(configuration)
    return {
        /**
         * Shows the time off balance for the given employment_id.  Please note, this endpoint is only supported for employments in certain countries. For countries where it\'s not supported, this endpoint will respond with a `404 Not Found`. 
         * @summary Show Time Off Balance
         * @param {TimeOffBalancesApiShowBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showBalance(requestParameters: TimeOffBalancesApiShowBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<TimeoffBalanceResponse> {
            return localVarFp.showBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for showBalance operation in TimeOffBalancesApi.
 * @export
 * @interface TimeOffBalancesApiShowBalanceRequest
 */
export type TimeOffBalancesApiShowBalanceRequest = {
    
    /**
    * Employment ID for which to show the time off balance
    * @type {string}
    * @memberof TimeOffBalancesApiShowBalance
    */
    readonly employmentId: string
    
}

/**
 * TimeOffBalancesApiGenerated - object-oriented interface
 * @export
 * @class TimeOffBalancesApiGenerated
 * @extends {BaseAPI}
 */
export class TimeOffBalancesApiGenerated extends BaseAPI {
    /**
     * Shows the time off balance for the given employment_id.  Please note, this endpoint is only supported for employments in certain countries. For countries where it\'s not supported, this endpoint will respond with a `404 Not Found`. 
     * @summary Show Time Off Balance
     * @param {TimeOffBalancesApiShowBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffBalancesApiGenerated
     */
    public showBalance(requestParameters: TimeOffBalancesApiShowBalanceRequest, options?: AxiosRequestConfig) {
        return TimeOffBalancesApiFp(this.configuration).showBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

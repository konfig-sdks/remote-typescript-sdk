/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { EmploymentCustomFieldValueResponse } from '../models';
// @ts-ignore
import { ListEmploymentCustomFieldsResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFieldsApi - axios parameter creator
 * @export
 */
export const CustomFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns custom fields definitions
         * @summary Lists custom fields definitions
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Change the amount of records returned per page, defaults to 20, limited to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDefinitions: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/custom-fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/custom-fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a custom field value for a given employment
         * @summary Show a custom field value
         * @param {string} customFieldId Custom field ID
         * @param {string} employmentId Employment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showValue: async (customFieldId: string, employmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldId' is not null or undefined
            assertParamExists('showValue', 'customFieldId', customFieldId)
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('showValue', 'employmentId', employmentId)
            const localVarPath = `/v1/custom-fields/{custom_field_id}/values/{employment_id}`
                .replace(`{${"custom_field_id"}}`, encodeURIComponent(String(customFieldId !== undefined ? customFieldId : `-custom_field_id-`)))
                .replace(`{${"employment_id"}}`, encodeURIComponent(String(employmentId !== undefined ? employmentId : `-employment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/custom-fields/{custom_field_id}/values/{employment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldsApi - functional programming interface
 * @export
 */
export const CustomFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns custom fields definitions
         * @summary Lists custom fields definitions
         * @param {CustomFieldsApiListDefinitionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDefinitions(requestParameters: CustomFieldsApiListDefinitionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEmploymentCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDefinitions(requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a custom field value for a given employment
         * @summary Show a custom field value
         * @param {CustomFieldsApiShowValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showValue(requestParameters: CustomFieldsApiShowValueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentCustomFieldValueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showValue(requestParameters.customFieldId, requestParameters.employmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFieldsApi - factory interface
 * @export
 */
export const CustomFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldsApiFp(configuration)
    return {
        /**
         * Returns custom fields definitions
         * @summary Lists custom fields definitions
         * @param {CustomFieldsApiListDefinitionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDefinitions(requestParameters: CustomFieldsApiListDefinitionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListEmploymentCustomFieldsResponse> {
            return localVarFp.listDefinitions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a custom field value for a given employment
         * @summary Show a custom field value
         * @param {CustomFieldsApiShowValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showValue(requestParameters: CustomFieldsApiShowValueRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentCustomFieldValueResponse> {
            return localVarFp.showValue(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listDefinitions operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiListDefinitionsRequest
 */
export type CustomFieldsApiListDefinitionsRequest = {
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof CustomFieldsApiListDefinitions
    */
    readonly page?: number
    
    /**
    * Change the amount of records returned per page, defaults to 20, limited to 100
    * @type {number}
    * @memberof CustomFieldsApiListDefinitions
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for showValue operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiShowValueRequest
 */
export type CustomFieldsApiShowValueRequest = {
    
    /**
    * Custom field ID
    * @type {string}
    * @memberof CustomFieldsApiShowValue
    */
    readonly customFieldId: string
    
    /**
    * Employment ID
    * @type {string}
    * @memberof CustomFieldsApiShowValue
    */
    readonly employmentId: string
    
}

/**
 * CustomFieldsApiGenerated - object-oriented interface
 * @export
 * @class CustomFieldsApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFieldsApiGenerated extends BaseAPI {
    /**
     * Returns custom fields definitions
     * @summary Lists custom fields definitions
     * @param {CustomFieldsApiListDefinitionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public listDefinitions(requestParameters: CustomFieldsApiListDefinitionsRequest = {}, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).listDefinitions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a custom field value for a given employment
     * @summary Show a custom field value
     * @param {CustomFieldsApiShowValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public showValue(requestParameters: CustomFieldsApiShowValueRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).showValue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

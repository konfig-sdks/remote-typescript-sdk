/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequestResponse } from '../models';
// @ts-ignore
import { FileParams } from '../models';
// @ts-ignore
import { FileResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { TooManyRequestsResponse } from '../models';
// @ts-ignore
import { UnauthorizedResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Downloads a file.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Download file
         * @param {string} id File ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadFile', 'id', id)
            const localVarPath = `/v1/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/files/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads a file associated with a specified employment.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Upload file
         * @param {string} employmentId 
         * @param {Uint8Array | File | buffer.File} file 
         * @param {string} type 
         * @param {FileParams} fileParams The file to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadEmploymentFile: async (employmentId: string, file: Uint8Array | File | buffer.File, type: string, fileParams: FileParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employmentId' is not null or undefined
            assertParamExists('uploadEmploymentFile', 'employmentId', employmentId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadEmploymentFile', 'file', file)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('uploadEmploymentFile', 'type', type)
            // verify required parameter 'fileParams' is not null or undefined
            assertParamExists('uploadEmploymentFile', 'fileParams', fileParams)
            const localVarPath = `/v1/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

            if (employmentId !== undefined) {
                await addFormParam('employment_id', employmentId, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
            if (type !== undefined) {
                await addFormParam('type', type, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: fileParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/documents',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Downloads a file.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Download file
         * @param {FilesApiDownloadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(requestParameters: FilesApiDownloadFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Uploads a file associated with a specified employment.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Upload file
         * @param {FilesApiUploadEmploymentFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadEmploymentFile(requestParameters: FilesApiUploadEmploymentFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileResponse>> {
            const fileParams: FileParams = {
                employment_id: requestParameters.employment_id,
                file: requestParameters.file,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadEmploymentFile(requestParameters.employmentId, requestParameters.file, requestParameters.type, fileParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * Downloads a file.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Download file
         * @param {FilesApiDownloadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(requestParameters: FilesApiDownloadFileRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.downloadFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads a file associated with a specified employment.  Please contact api-support@remote.com to request access to this endpoint. 
         * @summary Upload file
         * @param {FilesApiUploadEmploymentFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadEmploymentFile(requestParameters: FilesApiUploadEmploymentFileRequest, options?: AxiosRequestConfig): AxiosPromise<FileResponse> {
            return localVarFp.uploadEmploymentFile(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadFile operation in FilesApi.
 * @export
 * @interface FilesApiDownloadFileRequest
 */
export type FilesApiDownloadFileRequest = {
    
    /**
    * File ID
    * @type {string}
    * @memberof FilesApiDownloadFile
    */
    readonly id: string
    
}

/**
 * Request parameters for uploadEmploymentFile operation in FilesApi.
 * @export
 * @interface FilesApiUploadEmploymentFileRequest
 */
export type FilesApiUploadEmploymentFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FilesApiUploadEmploymentFile
    */
    readonly employmentId: string
    
    /**
    * 
    * @type {Uint8Array | File | buffer.File}
    * @memberof FilesApiUploadEmploymentFile
    */
    readonly file: Uint8Array | File | buffer.File
    
    /**
    * 
    * @type {string}
    * @memberof FilesApiUploadEmploymentFile
    */
    readonly type: string
    
} & FileParams

/**
 * FilesApiGenerated - object-oriented interface
 * @export
 * @class FilesApiGenerated
 * @extends {BaseAPI}
 */
export class FilesApiGenerated extends BaseAPI {
    /**
     * Downloads a file.  Please contact api-support@remote.com to request access to this endpoint. 
     * @summary Download file
     * @param {FilesApiDownloadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public downloadFile(requestParameters: FilesApiDownloadFileRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).downloadFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads a file associated with a specified employment.  Please contact api-support@remote.com to request access to this endpoint. 
     * @summary Upload file
     * @param {FilesApiUploadEmploymentFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiGenerated
     */
    public uploadEmploymentFile(requestParameters: FilesApiUploadEmploymentFileRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).uploadEmploymentFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

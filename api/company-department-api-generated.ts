/* tslint:disable */
/* eslint-disable */
/*
Remote API

Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom. 

Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more. 

Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CompanyDepartmentCreatedResponse } from '../models';
// @ts-ignore
import { CreateCompanyDepartmentParams } from '../models';
// @ts-ignore
import { ListCompanyDepartmentsPaginatedResponse } from '../models';
// @ts-ignore
import { NotFoundResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompanyDepartmentApi - axios parameter creator
 * @export
 */
export const CompanyDepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new department in the specified company. Department names may be non-unique and must be non-empty with no more than 255 characters (Unicode code points).
         * @summary Create New Department
         * @param {CreateCompanyDepartmentParams} createCompanyDepartmentParams Create Company Department request params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDepartment: async (createCompanyDepartmentParams: CreateCompanyDepartmentParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCompanyDepartmentParams' is not null or undefined
            assertParamExists('createNewDepartment', 'createCompanyDepartmentParams', createCompanyDepartmentParams)
            const localVarPath = `/v1/company-departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createCompanyDepartmentParams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company-departments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createCompanyDepartmentParams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all departments for the authorized company specified in the request. 
         * @summary List Company Departments
         * @param {string} companyId Company ID
         * @param {boolean} [paginate] Paginate option. Default: true. When true, paginates response; otherwise, does not.
         * @param {number} [page] Starts fetching records after the given page
         * @param {number} [pageSize] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyId: string, paginate?: boolean, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('list', 'companyId', companyId)
            const localVarPath = `/v1/company-departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", [], configuration)
            if (companyId !== undefined) {
                localVarQueryParameter['company_id'] = companyId;
            }

            if (paginate !== undefined) {
                localVarQueryParameter['paginate'] = paginate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/company-departments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyDepartmentApi - functional programming interface
 * @export
 */
export const CompanyDepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyDepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new department in the specified company. Department names may be non-unique and must be non-empty with no more than 255 characters (Unicode code points).
         * @summary Create New Department
         * @param {CompanyDepartmentApiCreateNewDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDepartment(requestParameters: CompanyDepartmentApiCreateNewDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDepartmentCreatedResponse>> {
            const createCompanyDepartmentParams: CreateCompanyDepartmentParams = {
                company_id: requestParameters.company_id,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDepartment(createCompanyDepartmentParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all departments for the authorized company specified in the request. 
         * @summary List Company Departments
         * @param {CompanyDepartmentApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CompanyDepartmentApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCompanyDepartmentsPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyId, requestParameters.paginate, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyDepartmentApi - factory interface
 * @export
 */
export const CompanyDepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyDepartmentApiFp(configuration)
    return {
        /**
         * Creates a new department in the specified company. Department names may be non-unique and must be non-empty with no more than 255 characters (Unicode code points).
         * @summary Create New Department
         * @param {CompanyDepartmentApiCreateNewDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDepartment(requestParameters: CompanyDepartmentApiCreateNewDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyDepartmentCreatedResponse> {
            return localVarFp.createNewDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all departments for the authorized company specified in the request. 
         * @summary List Company Departments
         * @param {CompanyDepartmentApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CompanyDepartmentApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ListCompanyDepartmentsPaginatedResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDepartment operation in CompanyDepartmentApi.
 * @export
 * @interface CompanyDepartmentApiCreateNewDepartmentRequest
 */
export type CompanyDepartmentApiCreateNewDepartmentRequest = {
    
} & CreateCompanyDepartmentParams

/**
 * Request parameters for list operation in CompanyDepartmentApi.
 * @export
 * @interface CompanyDepartmentApiListRequest
 */
export type CompanyDepartmentApiListRequest = {
    
    /**
    * Company ID
    * @type {string}
    * @memberof CompanyDepartmentApiList
    */
    readonly companyId: string
    
    /**
    * Paginate option. Default: true. When true, paginates response; otherwise, does not.
    * @type {boolean}
    * @memberof CompanyDepartmentApiList
    */
    readonly paginate?: boolean
    
    /**
    * Starts fetching records after the given page
    * @type {number}
    * @memberof CompanyDepartmentApiList
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof CompanyDepartmentApiList
    */
    readonly pageSize?: number
    
}

/**
 * CompanyDepartmentApiGenerated - object-oriented interface
 * @export
 * @class CompanyDepartmentApiGenerated
 * @extends {BaseAPI}
 */
export class CompanyDepartmentApiGenerated extends BaseAPI {
    /**
     * Creates a new department in the specified company. Department names may be non-unique and must be non-empty with no more than 255 characters (Unicode code points).
     * @summary Create New Department
     * @param {CompanyDepartmentApiCreateNewDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyDepartmentApiGenerated
     */
    public createNewDepartment(requestParameters: CompanyDepartmentApiCreateNewDepartmentRequest, options?: AxiosRequestConfig) {
        return CompanyDepartmentApiFp(this.configuration).createNewDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all departments for the authorized company specified in the request. 
     * @summary List Company Departments
     * @param {CompanyDepartmentApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyDepartmentApiGenerated
     */
    public list(requestParameters: CompanyDepartmentApiListRequest, options?: AxiosRequestConfig) {
        return CompanyDepartmentApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
